
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 19 10:33:18 CST 2018
//----------------------------------------------------

package ANALIZADORES.LenguajeDracoScript;

import java_cup.runtime.*;
import java.util.*;
import ESTRUCTURAS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 19 10:33:18 CST 2018
  */
public class Analizador_SintSR extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_SintSR() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_SintSR(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_SintSR(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\003\000\002\002\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\017\005" +
    "\000\002\004\005\000\002\004\004\000\002\005\002\000" +
    "\002\005\006\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\005\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\031\003\000\002" +
    "\032\005\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\070\004\000\002\034\007" +
    "\000\002\071\002\000\002\071\003\000\002\035\002\000" +
    "\002\035\003\000\002\036\005\000\002\036\003\000\002" +
    "\043\012\000\002\044\002\000\002\044\004\000\002\044" +
    "\003\000\002\045\004\000\002\045\003\000\002\046\011" +
    "\000\002\047\007\000\002\051\011\000\002\052\015\000" +
    "\002\053\006\000\002\053\005\000\002\054\003\000\002" +
    "\055\004\000\002\055\004\000\002\061\007\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\072\006\000\002\073\006\000" +
    "\002\074\006\000\002\075\006\000\002\076\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\041\004\001\002\000\004\010\013\001" +
    "\002\000\006\002\ufffe\041\ufffe\001\002\000\006\002\ufffd" +
    "\041\ufffd\001\002\000\004\002\012\001\002\000\006\002" +
    "\001\041\004\001\002\000\006\002\uffff\041\uffff\001\002" +
    "\000\004\002\000\001\002\000\010\010\ufff9\025\ufff9\026" +
    "\017\001\002\000\006\010\015\025\016\001\002\000\010" +
    "\010\ufff9\025\ufff9\026\017\001\002\000\006\002\ufffc\041" +
    "\ufffc\001\002\000\004\027\021\001\002\000\006\010\ufffb" +
    "\025\ufffb\001\002\000\004\026\022\001\002\000\026\004" +
    "\036\006\034\007\027\010\035\012\023\021\032\040\030" +
    "\057\033\060\043\061\045\001\002\000\024\004\036\006" +
    "\034\007\027\010\035\012\023\021\032\057\033\060\043" +
    "\061\045\001\002\000\046\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\022\uffdc\025\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\062" +
    "\116\063\uffdc\001\002\000\016\010\ufff4\022\ufff4\025\ufff4" +
    "\036\ufff4\037\ufff4\063\ufff4\001\002\000\046\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\022\uffd8\025\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\062\uffd8\063\uffd8\001\002\000\044\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\022\uffe0\025" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\063\uffe0\001\002\000\026\004\036\006" +
    "\034\007\027\010\035\012\023\021\032\040\030\057\033" +
    "\060\043\061\045\001\002\000\012\010\ufff8\025\ufff8\036" +
    "\110\037\107\001\002\000\026\004\036\006\034\007\027" +
    "\010\035\012\023\021\032\040\030\057\033\060\043\061" +
    "\045\001\002\000\044\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\022\uffdf\025\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\063\uffdf" +
    "\001\002\000\044\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\022\uffe1\025\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\063\uffe1\001" +
    "\002\000\050\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\021\075\022\uffd7\025\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\062\uffd7" +
    "\063\uffd7\001\002\000\044\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\022\uffe2\025\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\063" +
    "\uffe2\001\002\000\046\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\022\uffd9\025\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\062\uffd9" +
    "\063\uffd9\001\002\000\044\010\uffed\011\056\012\047\013" +
    "\053\014\060\015\051\022\uffed\025\uffed\030\052\031\050" +
    "\032\055\033\057\034\061\035\054\036\uffed\037\uffed\063" +
    "\uffed\001\002\000\044\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\022\uffe4\025\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\063\uffe4" +
    "\001\002\000\044\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\022\uffe5\025\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\063\uffe5\001" +
    "\002\000\044\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\022\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\063\uffde\001\002" +
    "\000\044\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\022\uffe3\025\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\063\uffe3\001\002\000" +
    "\044\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\022\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\063\uffdd\001\002\000\046" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\022" +
    "\uffda\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\062\uffda\063\uffda\001\002\000" +
    "\024\004\036\006\034\007\027\010\035\012\023\021\032" +
    "\057\033\060\043\061\045\001\002\000\024\004\036\006" +
    "\034\007\027\010\035\012\023\021\032\057\033\060\043" +
    "\061\045\001\002\000\024\004\036\006\034\007\027\010" +
    "\035\012\023\021\032\057\033\060\043\061\045\001\002" +
    "\000\024\004\036\006\034\007\027\010\035\012\023\021" +
    "\032\057\033\060\043\061\045\001\002\000\024\004\036" +
    "\006\034\007\027\010\035\012\023\021\032\057\033\060" +
    "\043\061\045\001\002\000\024\004\036\006\034\007\027" +
    "\010\035\012\023\021\032\057\033\060\043\061\045\001" +
    "\002\000\024\004\036\006\034\007\027\010\035\012\023" +
    "\021\032\057\033\060\043\061\045\001\002\000\024\004" +
    "\036\006\034\007\027\010\035\012\023\021\032\057\033" +
    "\060\043\061\045\001\002\000\024\004\036\006\034\007" +
    "\027\010\035\012\023\021\032\057\033\060\043\061\045" +
    "\001\002\000\024\004\036\006\034\007\027\010\035\012" +
    "\023\021\032\057\033\060\043\061\045\001\002\000\024" +
    "\004\036\006\034\007\027\010\035\012\023\021\032\057" +
    "\033\060\043\061\045\001\002\000\030\010\uffee\011\056" +
    "\012\047\013\053\014\060\015\051\022\uffee\025\uffee\036" +
    "\uffee\037\uffee\063\uffee\001\002\000\044\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\051\022\uffe9\025\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\063\uffe9\001\002\000\030\010\uffef\011\056\012" +
    "\047\013\053\014\060\015\051\022\uffef\025\uffef\036\uffef" +
    "\037\uffef\063\uffef\001\002\000\044\010\uffec\011\uffec\012" +
    "\uffec\013\053\014\060\015\051\022\uffec\025\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\063\uffec\001\002\000\030\010\ufff0\011\056\012\047" +
    "\013\053\014\060\015\051\022\ufff0\025\ufff0\036\ufff0\037" +
    "\ufff0\063\ufff0\001\002\000\030\010\ufff2\011\056\012\047" +
    "\013\053\014\060\015\051\022\ufff2\025\ufff2\036\ufff2\037" +
    "\ufff2\063\ufff2\001\002\000\044\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\051\022\uffea\025\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\063\uffea\001\002\000\030\010\ufff3\011\056\012\047\013" +
    "\053\014\060\015\051\022\ufff3\025\ufff3\036\ufff3\037\ufff3" +
    "\063\ufff3\001\002\000\044\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\022\uffe8\025\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\063" +
    "\uffe8\001\002\000\030\010\ufff1\011\056\012\047\013\053" +
    "\014\060\015\051\022\ufff1\025\ufff1\036\ufff1\037\ufff1\063" +
    "\ufff1\001\002\000\044\010\uffeb\011\uffeb\012\uffeb\013\053" +
    "\014\060\015\051\022\uffeb\025\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\063\uffeb" +
    "\001\002\000\030\004\036\006\034\007\027\010\035\012" +
    "\023\021\032\022\uffd2\040\030\057\033\060\043\061\045" +
    "\001\002\000\046\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\022\uffd6\025\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\062\uffd6\063" +
    "\uffd6\001\002\000\012\022\uffcf\036\110\037\107\063\uffcf" +
    "\001\002\000\006\022\uffd1\063\105\001\002\000\004\022" +
    "\102\001\002\000\046\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\022\uffd4\025\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\062\uffd4" +
    "\063\uffd4\001\002\000\046\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\022\uffd5\025\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\062" +
    "\uffd5\063\uffd5\001\002\000\046\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\022\uffd3\025\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\062\uffd3\063\uffd3\001\002\000\026\004\036\006\034\007" +
    "\027\010\035\012\023\021\032\040\030\057\033\060\043" +
    "\061\045\001\002\000\012\022\uffd0\036\110\037\107\063" +
    "\uffd0\001\002\000\026\004\036\006\034\007\027\010\035" +
    "\012\023\021\032\040\030\057\033\060\043\061\045\001" +
    "\002\000\026\004\036\006\034\007\027\010\035\012\023" +
    "\021\032\040\030\057\033\060\043\061\045\001\002\000" +
    "\016\010\ufff6\022\ufff6\025\ufff6\036\ufff6\037\107\063\ufff6" +
    "\001\002\000\016\010\ufff7\022\ufff7\025\ufff7\036\ufff7\037" +
    "\ufff7\063\ufff7\001\002\000\010\022\114\036\110\037\107" +
    "\001\002\000\044\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\022\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\063\uffe6\001" +
    "\002\000\016\010\ufff5\022\ufff5\025\ufff5\036\ufff5\037\ufff5" +
    "\063\ufff5\001\002\000\004\010\035\001\002\000\046\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\022\uffdb" +
    "\025\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\062\uffdb\063\uffdb\001\002\000\044" +
    "\010\uffe7\011\uffe7\012\uffe7\013\053\014\060\015\051\022" +
    "\uffe7\025\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\063\uffe7\001\002\000\006\010" +
    "\ufffa\025\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\012\002\006\012\007\013\004\017\005\001" +
    "\001\000\004\004\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\010\017\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\120" +
    "\001\001\000\002\001\001\000\004\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\030\007\024\010\037\011\041\023" +
    "\040\031\043\032\023\033\045\034\036\070\025\001\001" +
    "\000\022\010\117\011\041\023\040\031\043\032\023\033" +
    "\045\034\036\070\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\114\007\024\010\037\011\041\023\040\031\043\032\023" +
    "\033\045\034\036\070\025\001\001\000\002\001\001\000" +
    "\026\006\112\007\024\010\037\011\041\023\040\031\043" +
    "\032\023\033\045\034\036\070\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\073\011" +
    "\041\023\040\031\043\032\023\033\045\034\036\070\025" +
    "\001\001\000\022\010\072\011\041\023\040\031\043\032" +
    "\023\033\045\034\036\070\025\001\001\000\022\010\071" +
    "\011\041\023\040\031\043\032\023\033\045\034\036\070" +
    "\025\001\001\000\022\010\070\011\041\023\040\031\043" +
    "\032\023\033\045\034\036\070\025\001\001\000\022\010" +
    "\067\011\041\023\040\031\043\032\023\033\045\034\036" +
    "\070\025\001\001\000\022\010\066\011\041\023\040\031" +
    "\043\032\023\033\045\034\036\070\025\001\001\000\022" +
    "\010\065\011\041\023\040\031\043\032\023\033\045\034" +
    "\036\070\025\001\001\000\022\010\064\011\041\023\040" +
    "\031\043\032\023\033\045\034\036\070\025\001\001\000" +
    "\022\010\063\011\041\023\040\031\043\032\023\033\045" +
    "\034\036\070\025\001\001\000\022\010\062\011\041\023" +
    "\040\031\043\032\023\033\045\034\036\070\025\001\001" +
    "\000\022\010\061\011\041\023\040\031\043\032\023\033" +
    "\045\034\036\070\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\076\007\024\010\037\011\041\023\040\031\043" +
    "\032\023\033\045\034\036\035\100\036\077\070\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\103\071\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\105\007\024" +
    "\010\037\011\041\023\040\031\043\032\023\033\045\034" +
    "\036\070\025\001\001\000\002\001\001\000\026\006\111" +
    "\007\024\010\037\011\041\023\040\031\043\032\023\033" +
    "\045\034\036\070\025\001\001\000\026\006\110\007\024" +
    "\010\037\011\041\023\040\031\043\032\023\033\045\034" +
    "\036\070\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\116\034\036\070\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_SintSR$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_SintSR$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_SintSR$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public Nodo getRoot(){
        return action_obj.Root;
    }

    public Nodo crearNodo(String nombre, token tk)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,tk.cadena,tk.linea,tk.columna);
        return nuevo;
    }

    public Nodo crearNodo(String nombre, String valor, int linea, int columna)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,valor,linea,columna);
        return nuevo;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_SintSR$actions {


    public int Index=1;
    public Nodo Root;  

  private final Analizador_SintSR parser;

  /** Constructor */
  CUP$Analizador_SintSR$actions(Analizador_SintSR parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_SintSR$do_action(
    int                        CUP$Analizador_SintSR$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_SintSR$parser,
    java.util.Stack            CUP$Analizador_SintSR$stack,
    int                        CUP$Analizador_SintSR$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_SintSR$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_SintSR$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Pintar_Linea ::= LINE APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarlinea","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Linea",60, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Pintar_Cadena ::= STRING APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcadena","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Cadena",59, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Pintar_Ovalo ::= OVAL APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarovalo","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Ovalo",58, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Pintar_Cuadrado ::= QUADRATE APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcuadrado","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Cuadrado",57, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Pintar_Punto ::= POINT APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarpunto","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Punto",56, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Funciones_Nativas ::= Pintar_Linea 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Funciones_Nativas ::= Pintar_Ovalo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Funciones_Nativas ::= Pintar_Cuadrado 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Funciones_Nativas ::= Pintar_Punto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Funciones_Nativas ::= Pintar_Cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Sent_Imprimir ::= PRINT APAR expl CPAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		
                        RESULT = parser.crearNodo("imprimir","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Imprimir",47, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Simplificada ::= Acceso DEC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","decremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Simplificada",43, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Simplificada ::= Acceso INC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","incremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Simplificada",43, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Actualizacion ::= Simplificada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Actualizacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Inicializacion ::= Acceso IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Inicializacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Inicializacion ::= VAR ID IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("declaracionPrimitiva","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo",a.cadena,a.linea,a.columna));

                        Nodo lista_Id = parser.crearNodo("listaid","",b.linea,b.columna);
                        lista_Id.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));

                        RESULT.add(lista_Id);
                        RESULT.add(c);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Inicializacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Sent_Para ::= FOR APAR Inicializacion PYC expl PYC Actualizacion CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("Para","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                            RESULT.add(c);
                            RESULT.add(d);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Para",40, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Sent_Mientras ::= WHILE APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("Mientras","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Mientras",39, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sino ::= IF NO_T ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("Sino","",a.linea,a.columna);
                        RESULT.add(b);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("sino",37, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sino_si ::= ELIF APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("SinoSi","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("sino_si",36, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // muchos_sino_si ::= sino_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("muchos_sinosi","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",35, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // muchos_sino_si ::= muchos_sino_si sino_si 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",35, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // final_si ::= sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // final_si ::= muchos_sino_si sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                        RESULT.add(b);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // final_si ::= 
            {
              Nodo RESULT =null;
		
                        RESULT = parser.crearNodo("partefinal","",0,0);   
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Sent_Si ::= IF APAR expl CPAR ALLA MuchasSentencias CLLA final_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Si","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                        RESULT.add(c);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Si",33, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ValParams ::= expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("ValParams","",a.linea,a.columna);
                            RESULT.add(a);
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("ValParams",28, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ValParams ::= ValParams COMA expl 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("ValParams",28, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Lista_ValParams ::= ValParams 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		    RESULT = a;    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",27, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Lista_ValParams ::= 
            {
              Nodo RESULT =null;
		    RESULT = parser.crearNodo("ValParams","",0,0);  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",27, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MuchosIndices ::= indices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("MuchosIndices",55, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MuchosIndices ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("indices","",0,0); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("MuchosIndices",55, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada ::= ID APAR Lista_ValParams CPAR MuchosIndices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("llamada","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
                            RESULT.add(b);
                            RESULT.add(c);
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("llamada",26, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccesoArray ::= ID indices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("AccesoArray","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));     
                            RESULT.add(b);
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("AccesoArray",54, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoAcceso ::= ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 
                            RESULT = parser.crearNodo("AccesoId","",a.linea,a.columna); 
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna)); 
                        
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("tipoAcceso",25, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoAcceso ::= AccesoArray 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("tipoAcceso",25, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoAcceso ::= llamada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("tipoAcceso",25, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AccesoRecursivo ::= tipoAcceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Acceso","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("AccesoRecursivo",24, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AccesoRecursivo ::= AccesoRecursivo PTO tipoAcceso 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("AccesoRecursivo",24, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Acceso ::= AccesoRecursivo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a;  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Acceso",23, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dato ::= NULO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NULO_LITERAL",a);      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dato ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("FALSO_LITERAL",a);     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dato ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("VERDADERO_LITERAL",a); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dato ::= DECIMAL_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DECIMAL_LITERAL",a);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dato ::= NUM_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NUM_LITERAL",a);       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("STRING_LITERAL",a);    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expa ::= Acceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expa ::= valores_arreglo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expa ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expa ::= APAR expl CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expa ::= MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("unario","",a.linea,a.columna); RESULT.add(a); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expa ::= expa POT expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("POT","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expa ::= expa DIV expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DIV","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expa ::= expa POR expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("POR","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expa ::= expa MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENOS","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expa ::= expa MAS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAS","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expa MAYIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expa MAYQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expa MENIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expa MENQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expa DIF expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DIF","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expa IG_IG expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("IG_IG","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expl ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expl ::= NOT expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NOT","",a.linea,a.columna);  RESULT.add(a);                  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expl ::= expl OR expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("OR","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expl ::= expl AND expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("AND","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asignacion_var ::= DSPTS IGUAL DSPTS expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asignacion_var ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("","",0,0); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_id ::= ID asignacion_var 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_id ::= lista_id ID asignacion_var 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_variable ::= VAR lista_id PYC 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= declaracion_variable 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpos ::= cuerpo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpos",8, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpos ::= cuerpos cuerpo 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpos",8, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_SintSR$parser.done_parsing();
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= cuerpos 
            {
              Nodo RESULT =null;

              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 03 03:35:27 CST 2018
//----------------------------------------------------

package ANALIZADORES.LenguajeDracoScript;

import java_cup.runtime.*;
import java.util.*;
import ESTRUCTURAS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 03 03:35:27 CST 2018
  */
public class Analizador_SintSR extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_SintSR() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_SintSR(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_SintSR(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\003\000\002\002\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\020\007\000\002\017" +
    "\005\000\002\004\005\000\002\004\003\000\002\051\004" +
    "\000\002\005\002\000\002\005\006\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\031\003\000\002\032\003\000\002" +
    "\033\003\000\002\037\002\000\002\037\003\000\002\040" +
    "\004\000\002\040\003\000\002\043\012\000\002\044\002" +
    "\000\002\044\004\000\002\044\003\000\002\045\004\000" +
    "\002\045\003\000\002\046\011\000\002\047\006\000\002" +
    "\052\011\000\002\053\015\000\002\054\010\000\002\054" +
    "\005\000\002\055\003\000\002\056\004\000\002\056\004" +
    "\000\002\062\007\000\002\101\007\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\073\006\000\002\074\006\000\002\075" +
    "\006\000\002\076\006\000\002\077\006\000\002\035\002" +
    "\000\002\035\003\000\002\036\005\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\034\010\016\041\043\042\015\045\014\046" +
    "\007\047\040\050\031\051\042\052\012\053\023\054\037" +
    "\055\022\056\033\001\002\000\036\002\001\010\016\041" +
    "\043\042\015\045\014\046\007\047\040\050\031\051\042" +
    "\052\012\053\023\054\037\055\022\056\033\001\002\000" +
    "\052\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\063\uffd0\001\002\000\036\002\ufffe\010\ufffe\041\ufffe\042" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\021" +
    "\261\001\002\000\040\002\uffb4\010\uffb4\024\uffb4\041\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001\002\000\040" +
    "\002\uffb7\010\uffb7\024\uffb7\041\uffb7\042\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\001\002\000\004\021\256\001\002\000" +
    "\040\002\uffb8\010\uffb8\024\uffb8\041\uffb8\042\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\004\025\255\001\002" +
    "\000\004\021\226\001\002\000\052\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\017\uffce\020\uffce\022\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\063\uffce\001\002\000\004" +
    "\025\225\001\002\000\040\002\ufffa\010\ufffa\024\ufffa\041" +
    "\ufffa\042\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\040\002\ufff9\010\ufff9\024\ufff9\041\ufff9\042\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\001\002\000\004\021\222\001\002" +
    "\000\004\021\217\001\002\000\004\002\216\001\002\000" +
    "\040\002\ufff4\010\ufff4\024\ufff4\041\ufff4\042\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\001\002\000\040\002\uffb6\010\uffb6" +
    "\024\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\001\002\000\040\002\ufff8\010\ufff8\024\ufff8\041\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\040\002" +
    "\ufffc\010\ufffc\024\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\004\021\212\001\002\000\040" +
    "\002\ufffb\010\ufffb\024\ufffb\041\ufffb\042\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\004\021\207\001\002\000" +
    "\010\017\166\020\167\026\203\001\002\000\040\002\ufffd" +
    "\010\ufffd\024\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\001\002\000\004\025\202\001\002\000\004\021" +
    "\177\001\002\000\004\021\145\001\002\000\040\002\uffb5" +
    "\010\uffb5\024\uffb5\041\uffb5\042\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\001\002\000\004\021\135\001\002\000\004\010" +
    "\045\001\002\000\052\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\022\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\063\uffcf\001\002\000\010\025\uffee\026" +
    "\053\063\uffee\001\002\000\006\025\051\063\050\001\002" +
    "\000\006\025\ufff0\063\ufff0\001\002\000\004\010\045\001" +
    "\002\000\040\002\ufff2\010\ufff2\024\ufff2\041\ufff2\042\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000\006\025\ufff1" +
    "\063\ufff1\001\002\000\004\027\055\001\002\000\006\025" +
    "\uffef\063\uffef\001\002\000\004\026\056\001\002\000\030" +
    "\004\067\005\072\006\066\007\061\010\016\012\057\021" +
    "\064\040\062\057\065\060\074\061\076\001\002\000\026" +
    "\004\067\005\072\006\066\007\061\010\016\012\057\021" +
    "\064\057\065\060\074\061\076\001\002\000\014\022\uffe9" +
    "\025\uffe9\036\uffe9\037\uffe9\063\uffe9\001\002\000\042\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\022\uffd5\025\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\063\uffd5\001\002\000\030\004\067\005\072" +
    "\006\066\007\061\010\016\012\057\021\064\040\062\057" +
    "\065\060\074\061\076\001\002\000\012\025\uffed\036\127" +
    "\037\126\063\uffed\001\002\000\030\004\067\005\072\006" +
    "\066\007\061\010\016\012\057\021\064\040\062\057\065" +
    "\060\074\061\076\001\002\000\042\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\022\uffd4\025\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\063" +
    "\uffd4\001\002\000\042\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\022\uffd6\025\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\063\uffd6\001\002" +
    "\000\042\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\022" +
    "\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\063\uffd7\001\002\000\042\011" +
    "\106\012\077\013\104\014\110\015\101\022\uffe2\025\uffe2" +
    "\030\102\031\100\032\105\033\107\034\111\035\103\036" +
    "\uffe2\037\uffe2\063\uffe2\001\002\000\042\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\022\uffd9\025\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\063\uffd9\001\002\000\042\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\022\uffd1\025\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\063\uffd1\001" +
    "\002\000\042\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\022\uffda\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\063\uffda\001\002\000\042" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\022\uffd3\025" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\063\uffd3\001\002\000\042\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\022\uffd8\025\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\063\uffd8\001\002\000\042\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\022\uffd2\025\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\063\uffd2" +
    "\001\002\000\026\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\057\065\060\074\061\076\001\002" +
    "\000\026\004\067\005\072\006\066\007\061\010\016\012" +
    "\057\021\064\057\065\060\074\061\076\001\002\000\026" +
    "\004\067\005\072\006\066\007\061\010\016\012\057\021" +
    "\064\057\065\060\074\061\076\001\002\000\026\004\067" +
    "\005\072\006\066\007\061\010\016\012\057\021\064\057" +
    "\065\060\074\061\076\001\002\000\026\004\067\005\072" +
    "\006\066\007\061\010\016\012\057\021\064\057\065\060" +
    "\074\061\076\001\002\000\026\004\067\005\072\006\066" +
    "\007\061\010\016\012\057\021\064\057\065\060\074\061" +
    "\076\001\002\000\026\004\067\005\072\006\066\007\061" +
    "\010\016\012\057\021\064\057\065\060\074\061\076\001" +
    "\002\000\026\004\067\005\072\006\066\007\061\010\016" +
    "\012\057\021\064\057\065\060\074\061\076\001\002\000" +
    "\026\004\067\005\072\006\066\007\061\010\016\012\057" +
    "\021\064\057\065\060\074\061\076\001\002\000\026\004" +
    "\067\005\072\006\066\007\061\010\016\012\057\021\064" +
    "\057\065\060\074\061\076\001\002\000\026\004\067\005" +
    "\072\006\066\007\061\010\016\012\057\021\064\057\065" +
    "\060\074\061\076\001\002\000\026\011\106\012\077\013" +
    "\104\014\110\015\101\022\uffe3\025\uffe3\036\uffe3\037\uffe3" +
    "\063\uffe3\001\002\000\042\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\101\022\uffde\025\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\063\uffde\001" +
    "\002\000\026\011\106\012\077\013\104\014\110\015\101" +
    "\022\uffe4\025\uffe4\036\uffe4\037\uffe4\063\uffe4\001\002\000" +
    "\042\011\uffe1\012\uffe1\013\104\014\110\015\101\022\uffe1" +
    "\025\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\063\uffe1\001\002\000\026\011\106" +
    "\012\077\013\104\014\110\015\101\022\uffe5\025\uffe5\036" +
    "\uffe5\037\uffe5\063\uffe5\001\002\000\042\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\101\022\uffdf\025\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\063\uffdf\001\002\000\026\011\106\012\077\013\104\014" +
    "\110\015\101\022\uffe7\025\uffe7\036\uffe7\037\uffe7\063\uffe7" +
    "\001\002\000\026\011\106\012\077\013\104\014\110\015" +
    "\101\022\uffe8\025\uffe8\036\uffe8\037\uffe8\063\uffe8\001\002" +
    "\000\042\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\022" +
    "\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\063\uffdd\001\002\000\026\011" +
    "\106\012\077\013\104\014\110\015\101\022\uffe6\025\uffe6" +
    "\036\uffe6\037\uffe6\063\uffe6\001\002\000\042\011\uffe0\012" +
    "\uffe0\013\104\014\110\015\101\022\uffe0\025\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\063\uffe0\001\002\000\010\022\130\036\127\037\126" +
    "\001\002\000\030\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\040\062\057\065\060\074\061\076" +
    "\001\002\000\030\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\040\062\057\065\060\074\061\076" +
    "\001\002\000\042\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\022\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\063\uffdb\001\002\000" +
    "\014\022\uffeb\025\uffeb\036\uffeb\037\126\063\uffeb\001\002" +
    "\000\014\022\uffec\025\uffec\036\uffec\037\uffec\063\uffec\001" +
    "\002\000\014\022\uffea\025\uffea\036\uffea\037\uffea\063\uffea" +
    "\001\002\000\042\011\uffdc\012\uffdc\013\104\014\110\015" +
    "\101\022\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\063\uffdc\001\002\000" +
    "\032\004\067\005\072\006\066\007\061\010\016\012\057" +
    "\021\064\022\uffae\040\062\057\065\060\074\061\076\001" +
    "\002\000\012\022\uffab\036\127\037\126\063\uffab\001\002" +
    "\000\006\022\uffad\063\143\001\002\000\004\022\141\001" +
    "\002\000\004\025\142\001\002\000\040\002\uffb9\010\uffb9" +
    "\024\uffb9\041\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\001\002\000\030\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\040\062\057\065\060\074\061\076" +
    "\001\002\000\012\022\uffac\036\127\037\126\063\uffac\001" +
    "\002\000\006\010\016\041\146\001\002\000\004\010\172" +
    "\001\002\000\004\027\170\001\002\000\004\025\151\001" +
    "\002\000\030\004\067\005\072\006\066\007\061\010\016" +
    "\012\057\021\064\040\062\057\065\060\074\061\076\001" +
    "\002\000\010\025\153\036\127\037\126\001\002\000\004" +
    "\010\016\001\002\000\006\017\166\020\167\001\002\000" +
    "\004\022\uffbd\001\002\000\004\022\157\001\002\000\004" +
    "\023\160\001\002\000\036\010\016\024\uffcd\041\043\042" +
    "\015\045\014\046\007\047\040\050\031\051\042\052\012" +
    "\053\023\054\037\055\022\056\033\001\002\000\036\010" +
    "\uffca\024\uffca\041\uffca\042\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\001\002\000\004\024\165\001\002\000\036\010\016" +
    "\024\uffcc\041\043\042\015\045\014\046\007\047\040\050" +
    "\031\051\042\052\012\053\023\054\037\055\022\056\033" +
    "\001\002\000\036\010\uffcb\024\uffcb\041\uffcb\042\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\001\002\000\040\002\uffc0\010" +
    "\uffc0\024\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\001\002\000\006\022\uffbc\025\uffbc\001\002\000\006" +
    "\022\uffbb\025\uffbb\001\002\000\030\004\067\005\072\006" +
    "\066\007\061\010\016\012\057\021\064\040\062\057\065" +
    "\060\074\061\076\001\002\000\010\025\uffbe\036\127\037" +
    "\126\001\002\000\004\026\173\001\002\000\004\027\174" +
    "\001\002\000\004\026\175\001\002\000\030\004\067\005" +
    "\072\006\066\007\061\010\016\012\057\021\064\040\062" +
    "\057\065\060\074\061\076\001\002\000\010\025\uffbf\036" +
    "\127\037\126\001\002\000\032\004\067\005\072\006\066" +
    "\007\061\010\016\012\057\021\064\022\uffae\040\062\057" +
    "\065\060\074\061\076\001\002\000\004\022\201\001\002" +
    "\000\040\002\uffb1\010\uffb1\024\uffb1\041\uffb1\042\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\001\002\000\040\002\ufff7\010" +
    "\ufff7\024\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\001\002\000\004\027\204\001\002\000\004\026\205" +
    "\001\002\000\030\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\040\062\057\065\060\074\061\076" +
    "\001\002\000\010\025\ufff3\036\127\037\126\001\002\000" +
    "\032\004\067\005\072\006\066\007\061\010\016\012\057" +
    "\021\064\022\uffae\040\062\057\065\060\074\061\076\001" +
    "\002\000\004\022\211\001\002\000\040\002\uffaf\010\uffaf" +
    "\024\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\001\002\000\030\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\040\062\057\065\060\074\061\076" +
    "\001\002\000\010\022\214\036\127\037\126\001\002\000" +
    "\004\025\215\001\002\000\040\002\uffba\010\uffba\024\uffba" +
    "\041\uffba\042\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\001\002" +
    "\000\004\002\000\001\002\000\032\004\067\005\072\006" +
    "\066\007\061\010\016\012\057\021\064\022\uffae\040\062" +
    "\057\065\060\074\061\076\001\002\000\004\022\221\001" +
    "\002\000\040\002\uffb2\010\uffb2\024\uffb2\041\uffb2\042\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\032\004\067" +
    "\005\072\006\066\007\061\010\016\012\057\021\064\022" +
    "\uffae\040\062\057\065\060\074\061\076\001\002\000\004" +
    "\022\224\001\002\000\040\002\uffb0\010\uffb0\024\uffb0\041" +
    "\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000" +
    "\040\002\ufff6\010\ufff6\024\ufff6\041\ufff6\042\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\030\004\067\005\072" +
    "\006\066\007\061\010\016\012\057\021\064\040\062\057" +
    "\065\060\074\061\076\001\002\000\010\022\230\036\127" +
    "\037\126\001\002\000\004\023\231\001\002\000\036\010" +
    "\016\024\uffcd\041\043\042\015\045\014\046\007\047\040" +
    "\050\031\051\042\052\012\053\023\054\037\055\022\056" +
    "\033\001\002\000\004\024\233\001\002\000\044\002\uffc8" +
    "\010\uffc8\024\uffc8\041\uffc8\042\uffc8\043\235\044\237\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\001\002\000\040\002\uffc6\010" +
    "\uffc6\024\uffc6\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\004\021\247\001\002\000\006\043\uffc4" +
    "\044\uffc4\001\002\000\004\023\244\001\002\000\040\002" +
    "\uffc9\010\uffc9\024\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\001\002\000\006\043\235\044\237\001\002" +
    "\000\040\002\uffc7\010\uffc7\024\uffc7\041\uffc7\042\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\001\002\000\006\043\uffc5\044" +
    "\uffc5\001\002\000\036\010\016\024\uffcd\041\043\042\015" +
    "\045\014\046\007\047\040\050\031\051\042\052\012\053" +
    "\023\054\037\055\022\056\033\001\002\000\004\024\246" +
    "\001\002\000\040\002\uffc2\010\uffc2\024\uffc2\041\uffc2\042" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000\030\004" +
    "\067\005\072\006\066\007\061\010\016\012\057\021\064" +
    "\040\062\057\065\060\074\061\076\001\002\000\010\022" +
    "\251\036\127\037\126\001\002\000\004\023\252\001\002" +
    "\000\036\010\016\024\uffcd\041\043\042\015\045\014\046" +
    "\007\047\040\050\031\051\042\052\012\053\023\054\037" +
    "\055\022\056\033\001\002\000\004\024\254\001\002\000" +
    "\006\043\uffc3\044\uffc3\001\002\000\040\002\ufff5\010\ufff5" +
    "\024\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\032\004\067\005\072\006\066\007\061\010" +
    "\016\012\057\021\064\022\uffae\040\062\057\065\060\074" +
    "\061\076\001\002\000\004\022\260\001\002\000\040\002" +
    "\uffb3\010\uffb3\024\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\001\002\000\030\004\067\005\072\006\066" +
    "\007\061\010\016\012\057\021\064\040\062\057\065\060" +
    "\074\061\076\001\002\000\010\022\263\036\127\037\126" +
    "\001\002\000\004\023\264\001\002\000\036\010\016\024" +
    "\uffcd\041\043\042\015\045\014\046\007\047\040\050\031" +
    "\051\042\052\012\053\023\054\037\055\022\056\033\001" +
    "\002\000\004\024\266\001\002\000\040\002\uffc1\010\uffc1" +
    "\024\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\001\002\000\036\002\uffff\010\uffff\041\uffff\042\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\052\002\023\012\003\013\005\017\034\020" +
    "\016\031\033\032\004\033\043\043\031\052\027\053\017" +
    "\056\035\062\026\073\010\074\025\075\040\076\012\077" +
    "\007\100\020\101\024\001\001\000\046\013\266\017\034" +
    "\020\016\031\033\032\004\033\043\043\031\052\027\053" +
    "\017\056\035\062\026\073\010\074\025\075\040\076\012" +
    "\077\007\100\020\101\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\045\051\046\001\001\000\002\001\001\000\004\005" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\062\007\057\010\067\011\072\023\070\031\074\032" +
    "\004\033\043\001\001\000\016\010\133\011\072\023\070" +
    "\031\074\032\004\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\132\007\057\010\067\011\072" +
    "\023\070\031\074\032\004\033\043\001\001\000\002\001" +
    "\001\000\022\006\124\007\057\010\067\011\072\023\070" +
    "\031\074\032\004\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\123" +
    "\011\072\023\070\031\074\032\004\033\043\001\001\000" +
    "\016\010\122\011\072\023\070\031\074\032\004\033\043" +
    "\001\001\000\016\010\121\011\072\023\070\031\074\032" +
    "\004\033\043\001\001\000\016\010\120\011\072\023\070" +
    "\031\074\032\004\033\043\001\001\000\016\010\117\011" +
    "\072\023\070\031\074\032\004\033\043\001\001\000\016" +
    "\010\116\011\072\023\070\031\074\032\004\033\043\001" +
    "\001\000\016\010\115\011\072\023\070\031\074\032\004" +
    "\033\043\001\001\000\016\010\114\011\072\023\070\031" +
    "\074\032\004\033\043\001\001\000\016\010\113\011\072" +
    "\023\070\031\074\032\004\033\043\001\001\000\016\010" +
    "\112\011\072\023\070\031\074\032\004\033\043\001\001" +
    "\000\016\010\111\011\072\023\070\031\074\032\004\033" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\131\007\057\010\067\011\072\023\070\031\074" +
    "\032\004\033\043\001\001\000\022\006\130\007\057\010" +
    "\067\011\072\023\070\031\074\032\004\033\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\135\007\057" +
    "\010\067\011\072\023\070\031\074\032\004\033\043\035" +
    "\137\036\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\143\007\057\010\067\011\072\023\070\031\074" +
    "\032\004\033\043\001\001\000\002\001\001\000\012\031" +
    "\146\032\004\033\043\054\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\151\007" +
    "\057\010\067\011\072\023\070\031\074\032\004\033\043" +
    "\001\001\000\002\001\001\000\014\031\153\032\004\033" +
    "\043\055\155\056\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\013" +
    "\160\017\034\020\016\031\033\032\004\033\043\037\161" +
    "\040\162\043\031\052\027\053\017\056\035\062\026\073" +
    "\010\074\025\075\040\076\012\077\007\100\020\101\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\013" +
    "\163\017\034\020\016\031\033\032\004\033\043\043\031" +
    "\052\027\053\017\056\035\062\026\073\010\074\025\075" +
    "\040\076\012\077\007\100\020\101\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\170\007\057\010\067\011\072\023\070" +
    "\031\074\032\004\033\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\175\007\057\010\067\011\072\023\070\031\074\032" +
    "\004\033\043\001\001\000\002\001\001\000\026\006\135" +
    "\007\057\010\067\011\072\023\070\031\074\032\004\033" +
    "\043\035\177\036\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\205\007\057\010\067\011\072\023\070" +
    "\031\074\032\004\033\043\001\001\000\002\001\001\000" +
    "\026\006\135\007\057\010\067\011\072\023\070\031\074" +
    "\032\004\033\043\035\207\036\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\212\007\057\010\067" +
    "\011\072\023\070\031\074\032\004\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\135\007\057\010\067\011\072\023" +
    "\070\031\074\032\004\033\043\035\217\036\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\135\007" +
    "\057\010\067\011\072\023\070\031\074\032\004\033\043" +
    "\035\222\036\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\226\007\057\010\067" +
    "\011\072\023\070\031\074\032\004\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\013\160\017\034" +
    "\020\016\031\033\032\004\033\043\037\231\040\162\043" +
    "\031\052\027\053\017\056\035\062\026\073\010\074\025" +
    "\075\040\076\012\077\007\100\020\101\024\001\001\000" +
    "\002\001\001\000\012\044\237\045\240\046\235\047\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\242" +
    "\047\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\013\160\017\034\020\016\031\033\032\004\033\043" +
    "\037\244\040\162\043\031\052\027\053\017\056\035\062" +
    "\026\073\010\074\025\075\040\076\012\077\007\100\020" +
    "\101\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\247\007\057\010\067\011\072\023\070\031\074" +
    "\032\004\033\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\013\160\017\034\020\016\031\033\032\004" +
    "\033\043\037\252\040\162\043\031\052\027\053\017\056" +
    "\035\062\026\073\010\074\025\075\040\076\012\077\007" +
    "\100\020\101\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\135\007\057\010\067" +
    "\011\072\023\070\031\074\032\004\033\043\035\256\036" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\261\007\057\010\067\011\072\023\070\031\074\032" +
    "\004\033\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\013\160\017\034\020\016\031\033\032\004\033" +
    "\043\037\264\040\162\043\031\052\027\053\017\056\035" +
    "\062\026\073\010\074\025\075\040\076\012\077\007\100" +
    "\020\101\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_SintSR$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_SintSR$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_SintSR$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public Nodo getRoot(){
        return action_obj.Root;
    }

    public Nodo crearNodo(String nombre, token tk)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,tk.cadena,tk.linea,tk.columna);
        return nuevo;
    }

    public Nodo crearNodo(String nombre, String valor, int linea, int columna)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,valor,linea,columna);
        return nuevo;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_SintSR$actions {


    public int Index=1;
    public Nodo Root;  


  private final Analizador_SintSR parser;

  /** Constructor */
  CUP$Analizador_SintSR$actions(Analizador_SintSR parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_SintSR$do_action(
    int                        CUP$Analizador_SintSR$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_SintSR$parser,
    java.util.Stack            CUP$Analizador_SintSR$stack,
    int                        CUP$Analizador_SintSR$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_SintSR$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_SintSR$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ValParams ::= expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("ValParams","",a.linea,a.columna);
                            RESULT.add(a);
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("ValParams",28, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ValParams ::= ValParams COMA expl 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("ValParams",28, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Lista_ValParams ::= ValParams 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		    RESULT = a;    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",27, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Lista_ValParams ::= 
            {
              Nodo RESULT =null;
		    RESULT = parser.crearNodo("ValParams","",0,0);  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",27, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Pintar_Linea ::= LINE APAR Lista_ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarlinea","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Linea",61, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Pintar_Cadena ::= STRING APAR Lista_ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcadena","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Cadena",60, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Pintar_Ovalo ::= OVAL APAR Lista_ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarovalo","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Ovalo",59, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Pintar_Cuadrado ::= QUADRATE APAR Lista_ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcuadrado","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Cuadrado",58, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Pintar_Punto ::= POINT APAR Lista_ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarpunto","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Pintar_Punto",57, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Funciones_Nativas ::= Pintar_Linea 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",62, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Funciones_Nativas ::= Pintar_Ovalo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",62, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Funciones_Nativas ::= Pintar_Cuadrado 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",62, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Funciones_Nativas ::= Pintar_Punto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",62, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Funciones_Nativas ::= Pintar_Cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",62, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ImportarDasm ::= RUNMULTDASM APAR Lista_ValParams CPAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		
                        RESULT = parser.crearNodo("importar_dasm","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("ImportarDasm",63, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Sent_Imprimir ::= PRINT APAR expl CPAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		
                        RESULT = parser.crearNodo("imprimir","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Imprimir",48, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Simplificada ::= Acceso DEC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","decremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Simplificada",44, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Simplificada ::= Acceso INC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","incremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Simplificada",44, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Actualizacion ::= Simplificada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Actualizacion",43, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Inicializacion ::= Acceso IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Inicializacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Inicializacion ::= VAR ID DSPTS IGUAL DSPTS expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("primitiva","",a.linea,a.columna);
                        
                        Nodo lista_id = parser.crearNodo("listaid","",b.linea,b.columna);
                            Nodo hijo = parser.crearNodo("hijo","",b.linea,b.columna);
                            hijo.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));
                            hijo.add(c);
                            lista_id.add(hijo);
                        RESULT.add(lista_id);

                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Inicializacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sent_Para ::= FOR APAR Inicializacion PYC expl PYC Actualizacion CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("para","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                            RESULT.add(c);
                            RESULT.add(d);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Para",41, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sent_Mientras ::= WHILE APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("mientras","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Mientras",40, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sino ::= NO_T ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("Sino","",a.linea,a.columna);
                        RESULT.add(b);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("sino",37, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sino_si ::= ELIF APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                        RESULT = parser.crearNodo("SinoSi","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("sino_si",36, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // muchos_sino_si ::= sino_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("muchos_sinosi","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",35, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // muchos_sino_si ::= muchos_sino_si sino_si 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",35, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // final_si ::= sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // final_si ::= muchos_sino_si sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                        RESULT.add(b);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // final_si ::= 
            {
              Nodo RESULT =null;
		
                        RESULT = parser.crearNodo("partefinal","",0,0);   
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("final_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sent_Si ::= IF APAR expl CPAR ALLA MuchasSentencias CLLA final_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Si","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                        RESULT.add(c);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sent_Si",33, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sentencias ::= cuerpo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("sentencias","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sentencias",30, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Sentencias ::= Sentencias cuerpo 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                        
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Sentencias",30, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MuchasSentencias ::= Sentencias 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		  RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("MuchasSentencias",29, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MuchasSentencias ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("MuchasSentencias",29, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoAcceso ::= ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 
                            RESULT= parser.crearNodo("id",a.cadena,a.linea,a.columna); 
                        
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("tipoAcceso",25, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AccesoRecursivo ::= tipoAcceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("acceso","",a.linea,a.columna);
                        RESULT.add(a);
                     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("AccesoRecursivo",24, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Acceso ::= AccesoRecursivo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a;  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("Acceso",23, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dato ::= CHAR_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("CHAR_LITERAL",a);    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dato ::= NULO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NULO_LITERAL",a);      
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dato ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("FALSO_LITERAL",a);     
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dato ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("VERDADERO_LITERAL",a); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dato ::= DECIMAL_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DECIMAL_LITERAL",a);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dato ::= NUM_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NUM_LITERAL",a);       
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("STRING_LITERAL",a);    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expa ::= Acceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expa ::= valores_arreglo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expa ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expa ::= APAR expl CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expa ::= MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("unario","",a.linea,a.columna); RESULT.add(a); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expa ::= expa POT expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("POT","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expa ::= expa DIV expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DIV","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expa ::= expa POR expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("POR","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expa ::= expa MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENOS","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expa ::= expa MAS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAS","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expa MAYIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expa MAYQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expa MENIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expa MENQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("MENQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expa DIF expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("DIF","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expa IG_IG expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("IG_IG","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expl ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expl ::= NOT expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("NOT","",a.linea,a.columna);  RESULT.add(a);                  
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expl ::= expl OR expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("OR","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expl ::= expl AND expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = parser.crearNodo("AND","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion_var ::= DSPTS IGUAL DSPTS expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignacion_var ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("","",0,0); 
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nodix ::= ID asignacion_var 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("id_valor","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
                            RESULT.add(b);
                        
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("nodix",39, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_id ::= nodix 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            RESULT = parser.crearNodo("lista_id","",a.linea,a.columna);
                            RESULT.add(a);
                         
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_id ::= lista_id COMA nodix 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                            c.add(a);
                            RESULT = c;
                         
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_variable ::= VAR lista_id PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                            RESULT = parser.crearNodo("primitiva","",a.linea,a.columna);
                            RESULT.add(a);    
                          
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= Acceso DSPTS IGUAL DSPTS expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                    
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= ImportarDasm 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= SMASH PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                RESULT = parser.crearNodo("detener","",a.linea,a.columna);
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= asignacion PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= Simplificada PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= Sent_Imprimir 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= Funciones_Nativas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= Sent_Para 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= Sent_Si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= Sent_Mientras 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= declaracion_variable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpos ::= cuerpo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                RESULT = parser.crearNodo("cuerpo","",a.linea,a.columna);
                RESULT.add(a);
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpos",8, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpos ::= cuerpos cuerpo 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                b.add(a);
                RESULT = b;
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("cuerpos",8, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.elementAt(CUP$Analizador_SintSR$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_SintSR$parser.done_parsing();
          return CUP$Analizador_SintSR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= cuerpos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SintSR$stack.peek()).value;
		
                Root = parser.crearNodo("inicio","",a.linea,a.columna);
                Root.add(a);
            
              CUP$Analizador_SintSR$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SintSR$stack.peek()), RESULT);
            }
          return CUP$Analizador_SintSR$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


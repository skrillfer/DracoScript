
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 22 19:09:13 CST 2018
//----------------------------------------------------

package ANALIZADORES.LenguajeD_PP;

import java_cup.runtime.*;
import java.util.*;
import ESTRUCTURAS.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 22 19:09:13 CST 2018
  */
public class Analizador_SD extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_SD() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_SD(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_SD(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\012" +
    "\002\000\002\012\003\000\002\013\004\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\076\006\000\002\024" +
    "\007\000\002\025\004\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\004\000\002\016\006\000" +
    "\002\015\007\000\002\015\007\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\021\003\000\002\022" +
    "\005\000\002\023\005\000\002\023\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\005\000\002\004\003\000\002" +
    "\005\002\000\002\005\004\000\002\006\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\004" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\027\003\000\002\030\005" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\066\004\000\002\032\007\000\002" +
    "\067\002\000\002\067\003\000\002\033\002\000\002\033" +
    "\003\000\002\034\005\000\002\034\003\000\002\040\007" +
    "\000\002\041\012\000\002\042\002\000\002\042\004\000" +
    "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
    "\044\012\000\002\045\006\000\002\047\011\000\002\050" +
    "\015\000\002\051\006\000\002\051\005\000\002\052\003" +
    "\000\002\053\004\000\002\053\004\000\002\054\004\000" +
    "\002\055\004\000\002\056\004\000\002\056\005\000\002" +
    "\057\007\000\002\035\002\000\002\035\003\000\002\036" +
    "\004\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\004\000\002\037\004\000\002\037\003\000\002\037" +
    "\004\000\002\060\012\000\002\060\013\000\002\060\013" +
    "\000\002\060\012\000\002\060\012\000\002\060\011\000" +
    "\002\062\004\000\002\062\003\000\002\063\004\000\002" +
    "\061\002\000\002\061\003\000\002\064\005\000\002\064" +
    "\003\000\002\065\005\000\002\065\005\000\002\046\002" +
    "\000\002\046\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\070\006\000\002\071\006\000\002\072\006\000\002\073" +
    "\006\000\002\074\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\036\002\uffff\010\023\043\010\044\026\045" +
    "\037\046\012\047\021\052\033\054\044\067\045\071\005" +
    "\072\017\073\032\074\004\001\002\000\004\020\u0134\001" +
    "\002\000\004\020\u0131\001\002\000\062\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\023" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\055\u012f\056\uffbc\001\002\000\036\002\ufffa\010\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\052\ufffa\054" +
    "\ufffa\067\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\001\002" +
    "\000\010\010\uffde\020\u012c\024\uffde\001\002\000\004\002" +
    "\000\001\002\000\006\010\uffe1\024\uffe1\001\002\000\004" +
    "\027\uff74\001\002\000\062\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\004\027\uff77\001\002\000\004\027" +
    "\uff78\001\002\000\004\020\u0129\001\002\000\036\002\ufff9" +
    "\010\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\052" +
    "\ufff9\054\ufff9\067\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\001\002\000\006\010\uffdf\024\uffdf\001\002\000\006\010" +
    "\u011a\024\346\001\002\000\022\010\u010a\016\uffb7\017\uffb7" +
    "\020\160\024\u010b\027\uffb7\031\uffb7\055\uffb7\001\002\000" +
    "\062\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\021\uffb9\023\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\004\027\u0109\001\002\000\006\010\uffe0\024\uffe0\001\002" +
    "\000\004\002\u0108\001\002\000\036\002\ufffe\010\023\043" +
    "\010\044\026\045\037\046\012\047\021\052\033\054\044" +
    "\067\045\071\005\072\017\073\032\074\004\001\002\000" +
    "\004\027\uff76\001\002\000\004\020\u0104\001\002\000\004" +
    "\010\371\001\002\000\012\016\242\017\243\027\370\031" +
    "\250\001\002\000\004\027\367\001\002\000\036\002\ufffb" +
    "\010\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\052" +
    "\ufffb\054\ufffb\067\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\001\002\000\006\010\uffe2\024\uffe2\001\002\000\004\027" +
    "\uff75\001\002\000\004\027\366\001\002\000\036\002\ufffc" +
    "\010\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\052" +
    "\ufffc\054\ufffc\067\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\001\002\000\036\002\ufff8\010\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\052\ufff8\054\ufff8\067\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\001\002\000\004\020\363\001" +
    "\002\000\006\010\047\070\050\001\002\000\062\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021" +
    "\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\055\uffba\056\uffba\001\002\000\004\020\335" +
    "\001\002\000\004\020\051\001\002\000\004\021\052\001" +
    "\002\000\004\022\053\001\002\000\046\010\066\023\uff99" +
    "\043\010\044\026\045\037\046\012\047\021\057\060\061" +
    "\063\062\100\063\073\064\065\065\101\066\057\071\005" +
    "\072\017\073\032\074\004\001\002\000\004\010\254\001" +
    "\002\000\004\027\330\001\002\000\046\010\uff94\023\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\057\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\001\002\000\004\020\324\001" +
    "\002\000\004\020\275\001\002\000\046\010\uff96\023\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\057\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\071\uff96" +
    "\072\uff96\073\uff96\074\uff96\001\002\000\004\027\274\001" +
    "\002\000\004\020\266\001\002\000\046\010\uff91\023\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\057\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\071\uff91" +
    "\072\uff91\073\uff91\074\uff91\001\002\000\004\027\265\001" +
    "\002\000\022\010\254\016\uffb7\017\uffb7\020\160\024\161" +
    "\027\uffb7\031\uffb7\055\uffb7\001\002\000\046\010\uff90\023" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\057\uff90" +
    "\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\071" +
    "\uff90\072\uff90\073\uff90\074\uff90\001\002\000\046\010\uff92" +
    "\023\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\057" +
    "\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92" +
    "\071\uff92\072\uff92\073\uff92\074\uff92\001\002\000\046\010" +
    "\uff95\023\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\057\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\001\002\000\012" +
    "\016\242\017\243\027\251\031\250\001\002\000\004\027" +
    "\247\001\002\000\046\010\uff8f\023\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\057\uff8f\061\uff8f\062\uff8f\063" +
    "\uff8f\064\uff8f\065\uff8f\066\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\074\uff8f\001\002\000\046\010\uff93\023\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\057\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\066\uff93\071\uff93\072\uff93\073" +
    "\uff93\074\uff93\001\002\000\046\010\066\023\uff98\043\010" +
    "\044\026\045\037\046\012\047\021\057\060\061\063\062" +
    "\100\063\073\064\065\065\101\066\057\071\005\072\017" +
    "\073\032\074\004\001\002\000\046\010\uff8b\023\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\057\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\074\uff8b\001\002\000\004\020\221\001\002" +
    "\000\034\004\120\005\125\006\116\007\111\010\117\012" +
    "\105\020\114\022\110\027\107\042\112\050\121\051\115" +
    "\053\131\001\002\000\046\010\uff8e\023\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\057\uff8e\061\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\065\uff8e\066\uff8e\071\uff8e\072\uff8e\073" +
    "\uff8e\074\uff8e\001\002\000\004\023\104\001\002\000\036" +
    "\002\uff84\010\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\052\uff84\054\uff84\067\uff84\071\uff84\072\uff84\073\uff84" +
    "\074\uff84\001\002\000\030\004\120\005\125\006\116\007" +
    "\111\010\117\012\105\020\114\022\110\050\121\051\115" +
    "\053\131\001\002\000\024\021\uffd5\023\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\040\uffd5\041\uffd5\056\uffd5\001\002" +
    "\000\046\010\uff9c\023\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\057\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\001" +
    "\002\000\032\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\042\112\050\121\051\115\053" +
    "\131\001\002\000\052\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\021\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\056\uffc0\001\002\000\032\004\120\005" +
    "\125\006\116\007\111\010\117\012\105\020\114\022\110" +
    "\042\112\050\121\051\115\053\131\001\002\000\012\027" +
    "\211\040\171\041\166\056\167\001\002\000\032\004\120" +
    "\005\125\006\116\007\111\010\117\012\105\020\114\022" +
    "\110\042\112\050\121\051\115\053\131\001\002\000\052" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\021\uffbf\023" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\056" +
    "\uffbf\001\002\000\052\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\021\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\056\uffc1\001\002\000\066\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\160" +
    "\021\uffb7\023\uffb7\024\161\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\055\uffb7\056\uffb7\001\002\000" +
    "\052\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3" +
    "\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\056\uffc3\001\002\000\052\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\021\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\056\uffbe\001\002\000\052\011\141" +
    "\012\132\013\137\014\143\015\134\021\uffce\023\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\032\135\033\133\034\140" +
    "\035\142\036\144\037\136\040\uffce\041\uffce\056\uffce\001" +
    "\002\000\024\021\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\040\uffd9\041\uffd9\056\uffd9\001\002\000\052\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\021\uffe6\023\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\056\uffe6" +
    "\001\002\000\052\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\021\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\056\uffc2\001\002\000\052\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\021\uffc5\023\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\056\uffc5\001\002\000" +
    "\052\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\021\uffc6" +
    "\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\056\uffc6\001\002\000\052\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\021\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\056\uffc4\001\002\000\052\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\021\uffbd\023\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\056\uffbd\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\030\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\050\121\051\115\053\131\001" +
    "\002\000\036\011\141\012\132\013\137\014\143\015\134" +
    "\021\uffcf\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\040" +
    "\uffcf\041\uffcf\056\uffcf\001\002\000\052\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\134\021\uffca\023\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\056\uffca\001\002\000" +
    "\036\011\141\012\132\013\137\014\143\015\134\021\uffd0" +
    "\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\040\uffd0\041" +
    "\uffd0\056\uffd0\001\002\000\052\011\uffcd\012\uffcd\013\137" +
    "\014\143\015\134\021\uffcd\023\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\056\uffcd\001\002\000\036\011" +
    "\141\012\132\013\137\014\143\015\134\021\uffd1\023\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\040\uffd1\041\uffd1\056" +
    "\uffd1\001\002\000\052\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\134\021\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\056\uffcb\001\002\000\036\011\141\012" +
    "\132\013\137\014\143\015\134\021\uffd3\023\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\040\uffd3\041\uffd3\056\uffd3\001" +
    "\002\000\036\011\141\012\132\013\137\014\143\015\134" +
    "\021\uffd4\023\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\040" +
    "\uffd4\041\uffd4\056\uffd4\001\002\000\052\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\021\uffc9\023\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\056\uffc9\001\002\000" +
    "\036\011\141\012\132\013\137\014\143\015\134\021\uffd2" +
    "\023\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\040\uffd2\041" +
    "\uffd2\056\uffd2\001\002\000\052\011\uffcc\012\uffcc\013\137" +
    "\014\143\015\134\021\uffcc\023\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\056\uffcc\001\002\000\034\004" +
    "\120\005\125\006\116\007\111\010\117\012\105\020\114" +
    "\021\uffb2\022\110\042\112\050\121\051\115\053\131\001" +
    "\002\000\032\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\042\112\050\121\051\115\053" +
    "\131\001\002\000\064\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\021\uffb6\023\uffb6\024\161\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\055" +
    "\uffb6\056\uffb6\001\002\000\064\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\064\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\055\uffe9\056\uffe9\001\002\000\012\025\170" +
    "\040\171\041\166\056\167\001\002\000\032\004\120\005" +
    "\125\006\116\007\111\010\117\012\105\020\114\022\110" +
    "\042\112\050\121\051\115\053\131\001\002\000\032\004" +
    "\120\005\125\006\116\007\111\010\117\012\105\020\114" +
    "\022\110\042\112\050\121\051\115\053\131\001\002\000" +
    "\064\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\032\004\120\005\125\006\116\007\111\010\117" +
    "\012\105\020\114\022\110\042\112\050\121\051\115\053" +
    "\131\001\002\000\024\021\uffd7\023\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\040\uffd7\041\166\056\167\001\002\000" +
    "\012\030\174\040\171\041\166\056\167\001\002\000\032" +
    "\004\120\005\125\006\116\007\111\010\117\012\105\020" +
    "\114\022\110\042\112\050\121\051\115\053\131\001\002" +
    "\000\024\021\uffae\023\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\040\171\041\166\056\167\001\002\000\024\021\uffd8" +
    "\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\040\uffd8\041" +
    "\uffd8\056\167\001\002\000\014\021\uffaf\026\uffaf\040\171" +
    "\041\166\056\167\001\002\000\006\021\uffb1\026\205\001" +
    "\002\000\004\021\202\001\002\000\064\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\023" +
    "\uffb4\024\161\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\055\uffb4\056\uffb4\001\002\000\062\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\021" +
    "\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\055\uffb5\056\uffb5\001\002\000\064\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\023\uffb3\024\161\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\055\uffb3\056\uffb3\001\002\000\032" +
    "\004\120\005\125\006\116\007\111\010\117\012\105\020" +
    "\114\022\110\042\112\050\121\051\115\053\131\001\002" +
    "\000\014\021\uffb0\026\uffb0\040\171\041\166\056\167\001" +
    "\002\000\012\021\210\040\171\041\166\056\167\001\002" +
    "\000\052\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\021" +
    "\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\056\uffc7\001\002\000\046\010\uff9b\023\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\047\uff9b\057\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\001\002\000\024\021\uffd6\023\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\040\uffd6\041\uffd6\056\167" +
    "\001\002\000\014\023\uffe3\026\uffe3\040\171\041\166\056" +
    "\167\001\002\000\006\023\216\026\215\001\002\000\032" +
    "\004\120\005\125\006\116\007\111\010\117\012\105\020" +
    "\114\022\110\042\112\050\121\051\115\053\131\001\002" +
    "\000\052\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\021" +
    "\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\056\uffe5\001\002\000\014\023\uffe4\026\uffe4\040\171" +
    "\041\166\056\167\001\002\000\052\011\uffc8\012\uffc8\013" +
    "\137\014\143\015\134\021\uffc8\023\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\056\uffc8\001\002\000\006" +
    "\010\117\045\224\001\002\000\004\031\244\001\002\000" +
    "\004\027\230\001\002\000\004\010\225\001\002\000\004" +
    "\031\226\001\002\000\032\004\120\005\125\006\116\007" +
    "\111\010\117\012\105\020\114\022\110\042\112\050\121" +
    "\051\115\053\131\001\002\000\012\027\uffa3\040\171\041" +
    "\166\056\167\001\002\000\032\004\120\005\125\006\116" +
    "\007\111\010\117\012\105\020\114\022\110\042\112\050" +
    "\121\051\115\053\131\001\002\000\012\027\232\040\171" +
    "\041\166\056\167\001\002\000\004\010\117\001\002\000" +
    "\006\016\242\017\243\001\002\000\004\021\uffa1\001\002" +
    "\000\004\021\236\001\002\000\004\022\237\001\002\000" +
    "\046\010\066\023\uff99\043\010\044\026\045\037\046\012" +
    "\047\021\057\060\061\063\062\100\063\073\064\065\065" +
    "\101\066\057\071\005\072\017\073\032\074\004\001\002" +
    "\000\004\023\241\001\002\000\046\010\uffa4\023\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\057\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\071\uffa4\072" +
    "\uffa4\073\uffa4\074\uffa4\001\002\000\006\021\uffa0\027\uffa0" +
    "\001\002\000\006\021\uff9f\027\uff9f\001\002\000\032\004" +
    "\120\005\125\006\116\007\111\010\117\012\105\020\114" +
    "\022\110\042\112\050\121\051\115\053\131\001\002\000" +
    "\012\027\uffa2\040\171\041\166\056\167\001\002\000\046" +
    "\010\uff97\023\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\057\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97" +
    "\066\uff97\071\uff97\072\uff97\073\uff97\074\uff97\001\002\000" +
    "\046\010\uff9e\023\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\057\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\001\002" +
    "\000\032\004\120\005\125\006\116\007\111\010\117\012" +
    "\105\020\114\022\110\042\112\050\121\051\115\053\131" +
    "\001\002\000\046\010\uff8d\023\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\057\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\001\002\000\012\027\253\040\171\041\166\056\167" +
    "\001\002\000\056\002\uffec\010\uffec\023\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\052\uffec\054\uffec\057\uffec" +
    "\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067" +
    "\uffec\071\uffec\072\uffec\073\uffec\074\uffec\001\002\000\012" +
    "\024\uffdc\026\uffdc\027\uffdc\031\uffdc\001\002\000\012\024" +
    "\161\026\256\027\uffb4\031\uffb4\001\002\000\004\010\264" +
    "\001\002\000\006\027\uffdb\031\260\001\002\000\032\004" +
    "\120\005\125\006\116\007\111\010\117\012\105\020\114" +
    "\022\110\042\112\050\121\051\115\053\131\001\002\000" +
    "\004\027\262\001\002\000\056\002\uffea\010\uffea\023\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\052\uffea\054" +
    "\uffea\057\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\071\uffea\072\uffea\073\uffea\074\uffea\001" +
    "\002\000\012\027\uffda\040\171\041\166\056\167\001\002" +
    "\000\012\024\uffdd\026\uffdd\027\uffdd\031\uffdd\001\002\000" +
    "\046\010\uff9d\023\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\057\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\001\002" +
    "\000\032\004\120\005\125\006\116\007\111\010\117\012" +
    "\105\020\114\022\110\042\112\050\121\051\115\053\131" +
    "\001\002\000\012\021\270\040\171\041\166\056\167\001" +
    "\002\000\004\022\271\001\002\000\046\010\066\023\uff99" +
    "\043\010\044\026\045\037\046\012\047\021\057\060\061" +
    "\063\062\100\063\073\064\065\065\101\066\057\071\005" +
    "\072\017\073\032\074\004\001\002\000\004\023\273\001" +
    "\002\000\046\010\uffa5\023\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\057\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\001\002\000\046\010\uff8c\023\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\057\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\uff8c\065\uff8c\066\uff8c\071\uff8c\072\uff8c\073\uff8c\074" +
    "\uff8c\001\002\000\032\004\120\005\125\006\116\007\111" +
    "\010\117\012\105\020\114\022\110\042\112\050\121\051" +
    "\115\053\131\001\002\000\012\021\277\040\171\041\166" +
    "\056\167\001\002\000\004\022\300\001\002\000\046\010" +
    "\066\023\uff99\043\010\044\026\045\037\046\012\047\021" +
    "\057\060\061\063\062\100\063\073\064\065\065\101\066" +
    "\057\071\005\072\017\073\032\074\004\001\002\000\004" +
    "\023\302\001\002\000\050\010\uffac\023\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\057\uffac\060\305\061\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\001\002\000\046\010\uffaa\023\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\057\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\001\002\000\004\060\uffa8\001" +
    "\002\000\006\022\313\057\312\001\002\000\046\010\uffad" +
    "\023\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\057" +
    "\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\071\uffad\072\uffad\073\uffad\074\uffad\001\002\000\004\060" +
    "\305\001\002\000\046\010\uffab\023\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\057\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\071\uffab\072\uffab\073\uffab" +
    "\074\uffab\001\002\000\004\060\uffa9\001\002\000\004\020" +
    "\316\001\002\000\046\010\066\023\uff99\043\010\044\026" +
    "\045\037\046\012\047\021\057\060\061\063\062\100\063" +
    "\073\064\065\065\101\066\057\071\005\072\017\073\032" +
    "\074\004\001\002\000\004\023\315\001\002\000\046\010" +
    "\uffa6\023\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\057\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002\000\032" +
    "\004\120\005\125\006\116\007\111\010\117\012\105\020" +
    "\114\022\110\042\112\050\121\051\115\053\131\001\002" +
    "\000\012\021\320\040\171\041\166\056\167\001\002\000" +
    "\004\022\321\001\002\000\046\010\066\023\uff99\043\010" +
    "\044\026\045\037\046\012\047\021\057\060\061\063\062" +
    "\100\063\073\064\065\065\101\066\057\071\005\072\017" +
    "\073\032\074\004\001\002\000\004\023\323\001\002\000" +
    "\004\060\uffa7\001\002\000\032\004\120\005\125\006\116" +
    "\007\111\010\117\012\105\020\114\022\110\042\112\050" +
    "\121\051\115\053\131\001\002\000\012\021\326\040\171" +
    "\041\166\056\167\001\002\000\004\027\327\001\002\000" +
    "\046\010\uff9a\023\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\001\002" +
    "\000\046\010\uff8a\023\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\057\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a" +
    "\065\uff8a\066\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\001" +
    "\002\000\012\024\161\026\256\027\uffb4\031\uffb4\001\002" +
    "\000\006\027\uffdb\031\260\001\002\000\004\027\334\001" +
    "\002\000\056\002\uffeb\010\uffeb\023\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\052\uffeb\054\uffeb\057\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001\002\000\020\010" +
    "\342\021\uff80\043\336\044\026\045\037\046\012\047\021" +
    "\001\002\000\006\010\uffde\024\uffde\001\002\000\006\021" +
    "\uff7d\026\uff7d\001\002\000\004\021\357\001\002\000\006" +
    "\021\uff7f\026\355\001\002\000\006\010\uff7a\024\346\001" +
    "\002\000\006\010\uff7a\024\346\001\002\000\004\010\352" +
    "\001\002\000\006\010\uff82\024\uff82\001\002\000\004\025" +
    "\351\001\002\000\006\010\uff79\024\346\001\002\000\006" +
    "\010\uff83\024\uff83\001\002\000\006\010\uff81\024\uff81\001" +
    "\002\000\006\021\uff7c\026\uff7c\001\002\000\004\010\354" +
    "\001\002\000\006\021\uff7b\026\uff7b\001\002\000\016\010" +
    "\342\043\336\044\026\045\037\046\012\047\021\001\002" +
    "\000\006\021\uff7e\026\uff7e\001\002\000\004\022\360\001" +
    "\002\000\046\010\066\023\uff99\043\010\044\026\045\037" +
    "\046\012\047\021\057\060\061\063\062\100\063\073\064" +
    "\065\065\101\066\057\071\005\072\017\073\032\074\004" +
    "\001\002\000\004\023\362\001\002\000\036\002\uff89\010" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\052\uff89" +
    "\054\uff89\067\uff89\071\uff89\072\uff89\073\uff89\074\uff89\001" +
    "\002\000\004\004\364\001\002\000\004\021\365\001\002" +
    "\000\004\027\ufff3\001\002\000\036\002\ufff4\010\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\052\ufff4\054\ufff4" +
    "\067\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000" +
    "\036\002\ufff6\010\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\052\ufff6\054\ufff6\067\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\001\002\000\036\002\ufff7\010\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\052\ufff7\054\ufff7\067" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\004" +
    "\022\372\001\002\000\016\010\066\043\336\044\026\045" +
    "\037\046\012\047\021\001\002\000\020\010\066\023\u0103" +
    "\043\336\044\026\045\037\046\012\047\021\001\002\000" +
    "\004\027\u0101\001\002\000\010\016\242\017\243\031\250" +
    "\001\002\000\020\010\uffee\023\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\001\002\000\020\010\ufff0\023\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000" +
    "\020\010\uffef\023\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\001\002\000\020\010\uffed\023\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\001\002\000\020\010\ufff1" +
    "\023\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001" +
    "\002\000\036\002\ufff2\010\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\052\ufff2\054\ufff2\067\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\001\002\000\032\004\120\005\125" +
    "\006\116\007\111\010\117\012\105\020\114\022\110\042" +
    "\112\050\121\051\115\053\131\001\002\000\006\021\u0106" +
    "\026\205\001\002\000\004\027\uff71\001\002\000\036\002" +
    "\ufffd\010\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\052\ufffd\054\ufffd\067\ufffd\071\ufffd\072\ufffd\073\ufffd\074" +
    "\ufffd\001\002\000\004\002\001\001\002\000\036\002\ufff5" +
    "\010\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\052" +
    "\ufff5\054\ufff5\067\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\001\002\000\014\020\u0114\024\uffdc\026\uffdc\027\uffdc\031" +
    "\uffdc\001\002\000\034\004\120\005\125\006\116\007\111" +
    "\010\117\012\105\020\114\022\110\025\351\042\112\050" +
    "\121\051\115\053\131\001\002\000\006\010\u010d\024\346" +
    "\001\002\000\004\020\u010e\001\002\000\020\010\342\021" +
    "\uff80\043\336\044\026\045\037\046\012\047\021\001\002" +
    "\000\004\021\u0110\001\002\000\004\022\u0111\001\002\000" +
    "\046\010\066\023\uff99\043\010\044\026\045\037\046\012" +
    "\047\021\057\060\061\063\062\100\063\073\064\065\065" +
    "\101\066\057\071\005\072\017\073\032\074\004\001\002" +
    "\000\004\023\u0113\001\002\000\036\002\uff87\010\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\047\uff87\052\uff87\054\uff87" +
    "\067\uff87\071\uff87\072\uff87\073\uff87\074\uff87\001\002\000" +
    "\020\010\342\021\uff80\043\336\044\026\045\037\046\012" +
    "\047\021\001\002\000\004\021\u0116\001\002\000\004\022" +
    "\u0117\001\002\000\046\010\066\023\uff99\043\010\044\026" +
    "\045\037\046\012\047\021\057\060\061\063\062\100\063" +
    "\073\064\065\065\101\066\057\071\005\072\017\073\032" +
    "\074\004\001\002\000\004\023\u0119\001\002\000\036\002" +
    "\uff85\010\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\052\uff85\054\uff85\067\uff85\071\uff85\072\uff85\073\uff85\074" +
    "\uff85\001\002\000\014\020\u0123\024\uffdc\026\uffdc\027\uffdc" +
    "\031\uffdc\001\002\000\006\010\u011c\024\346\001\002\000" +
    "\004\020\u011d\001\002\000\020\010\342\021\uff80\043\336" +
    "\044\026\045\037\046\012\047\021\001\002\000\004\021" +
    "\u011f\001\002\000\004\022\u0120\001\002\000\046\010\066" +
    "\023\uff99\043\010\044\026\045\037\046\012\047\021\057" +
    "\060\061\063\062\100\063\073\064\065\065\101\066\057" +
    "\071\005\072\017\073\032\074\004\001\002\000\004\023" +
    "\u0122\001\002\000\036\002\uff88\010\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\047\uff88\052\uff88\054\uff88\067\uff88\071" +
    "\uff88\072\uff88\073\uff88\074\uff88\001\002\000\020\010\342" +
    "\021\uff80\043\336\044\026\045\037\046\012\047\021\001" +
    "\002\000\004\021\u0125\001\002\000\004\022\u0126\001\002" +
    "\000\046\010\066\023\uff99\043\010\044\026\045\037\046" +
    "\012\047\021\057\060\061\063\062\100\063\073\064\065" +
    "\065\101\066\057\071\005\072\017\073\032\074\004\001" +
    "\002\000\004\023\u0128\001\002\000\036\002\uff86\010\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\052\uff86\054" +
    "\uff86\067\uff86\071\uff86\072\uff86\073\uff86\074\uff86\001\002" +
    "\000\032\004\120\005\125\006\116\007\111\010\117\012" +
    "\105\020\114\022\110\042\112\050\121\051\115\053\131" +
    "\001\002\000\006\021\u012b\026\205\001\002\000\004\027" +
    "\uff72\001\002\000\032\004\120\005\125\006\116\007\111" +
    "\010\117\012\105\020\114\022\110\042\112\050\121\051" +
    "\115\053\131\001\002\000\006\021\u012e\026\205\001\002" +
    "\000\004\027\uff70\001\002\000\004\010\117\001\002\000" +
    "\062\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\021\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\055\uffbb\056\uffbb\001\002\000" +
    "\032\004\120\005\125\006\116\007\111\010\117\012\105" +
    "\020\114\022\110\042\112\050\121\051\115\053\131\001" +
    "\002\000\006\021\u0133\026\205\001\002\000\004\027\uff73" +
    "\001\002\000\032\004\120\005\125\006\116\007\111\010" +
    "\117\012\105\020\114\022\110\042\112\050\121\051\115" +
    "\053\131\001\002\000\006\021\u0136\026\205\001\002\000" +
    "\004\027\uff6f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0134\000\056\002\026\003\021\012\010\013\027\014" +
    "\041\015\035\016\017\024\006\027\033\030\005\031\045" +
    "\032\023\053\034\060\042\066\013\070\014\071\030\072" +
    "\037\073\015\074\012\075\024\076\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\330\062\u011a\063\344\001\001\000" +
    "\014\004\254\017\161\020\162\062\u010b\063\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\021\014\u0106\015\035\016\017" +
    "\024\006\027\033\030\005\031\045\032\023\053\034\060" +
    "\042\066\013\070\014\071\030\072\037\073\015\074\012" +
    "\075\024\076\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\053\015\076\016\101\027\071\030\005\031" +
    "\045\032\023\035\102\036\075\037\060\041\070\047\055" +
    "\050\074\053\061\054\067\055\063\056\066\057\073\066" +
    "\013\070\014\071\030\072\037\073\015\074\012\075\054" +
    "\001\001\000\004\004\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\254\017\161\020\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\053\015\076\016\101\027" +
    "\071\030\005\031\045\032\023\037\245\041\070\047\055" +
    "\050\074\053\061\054\067\055\063\056\066\057\073\066" +
    "\013\070\014\071\030\072\037\073\015\074\012\075\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\112\007\105\010\121\011\126\021\125\022\123\027\127" +
    "\030\005\031\045\032\023\040\122\066\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\010\217\011\126\021\125\022\123\027\127\030\005\031" +
    "\045\032\023\066\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\212\007\105\010\121\011\126\021" +
    "\125\022\123\023\213\027\127\030\005\031\045\032\023" +
    "\040\122\066\013\001\001\000\002\001\001\000\032\006" +
    "\211\007\105\010\121\011\126\021\125\022\123\027\127" +
    "\030\005\031\045\032\023\040\122\066\013\001\001\000" +
    "\002\001\001\000\032\006\206\007\105\010\121\011\126" +
    "\021\125\022\123\027\127\030\005\031\045\032\023\040" +
    "\122\066\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\161\020\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\156" +
    "\011\126\021\125\022\123\027\127\030\005\031\045\032" +
    "\023\066\013\001\001\000\024\010\155\011\126\021\125" +
    "\022\123\027\127\030\005\031\045\032\023\066\013\001" +
    "\001\000\024\010\154\011\126\021\125\022\123\027\127" +
    "\030\005\031\045\032\023\066\013\001\001\000\024\010" +
    "\153\011\126\021\125\022\123\027\127\030\005\031\045" +
    "\032\023\066\013\001\001\000\024\010\152\011\126\021" +
    "\125\022\123\027\127\030\005\031\045\032\023\066\013" +
    "\001\001\000\024\010\151\011\126\021\125\022\123\027" +
    "\127\030\005\031\045\032\023\066\013\001\001\000\024" +
    "\010\150\011\126\021\125\022\123\027\127\030\005\031" +
    "\045\032\023\066\013\001\001\000\024\010\147\011\126" +
    "\021\125\022\123\027\127\030\005\031\045\032\023\066" +
    "\013\001\001\000\024\010\146\011\126\021\125\022\123" +
    "\027\127\030\005\031\045\032\023\066\013\001\001\000" +
    "\024\010\145\011\126\021\125\022\123\027\127\030\005" +
    "\031\045\032\023\066\013\001\001\000\024\010\144\011" +
    "\126\021\125\022\123\027\127\030\005\031\045\032\023" +
    "\066\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\176" +
    "\007\105\010\121\011\126\021\125\022\123\027\127\030" +
    "\005\031\045\032\023\033\200\034\177\040\122\066\013" +
    "\001\001\000\032\006\164\007\105\010\121\011\126\021" +
    "\125\022\123\027\127\030\005\031\045\032\023\040\122" +
    "\066\013\001\001\000\004\020\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\175" +
    "\007\105\010\121\011\126\021\125\022\123\027\127\030" +
    "\005\031\045\032\023\040\122\066\013\001\001\000\032" +
    "\006\172\007\105\010\121\011\126\021\125\022\123\027" +
    "\127\030\005\031\045\032\023\040\122\066\013\001\001" +
    "\000\002\001\001\000\032\006\171\007\105\010\121\011" +
    "\126\021\125\022\123\027\127\030\005\031\045\032\023" +
    "\040\122\066\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\174\007\105\010\121\011\126\021\125" +
    "\022\123\027\127\030\005\031\045\032\023\040\122\066" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\203\020\162\067\202\001\001\000\002\001\001\000\004" +
    "\020\163\001\001\000\032\006\205\007\105\010\121\011" +
    "\126\021\125\022\123\027\127\030\005\031\045\032\023" +
    "\040\122\066\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\216\007" +
    "\105\010\121\011\126\021\125\022\123\027\127\030\005" +
    "\031\045\032\023\040\122\066\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\221" +
    "\030\005\031\045\032\023\051\222\066\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\226\007\105\010\121\011\126\021" +
    "\125\022\123\027\127\030\005\031\045\032\023\040\122" +
    "\066\013\001\001\000\002\001\001\000\032\006\230\007" +
    "\105\010\121\011\126\021\125\022\123\027\127\030\005" +
    "\031\045\032\023\040\122\066\013\001\001\000\002\001" +
    "\001\000\020\027\232\030\005\031\045\032\023\052\234" +
    "\053\233\066\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\053" +
    "\015\076\016\101\027\071\030\005\031\045\032\023\035" +
    "\237\036\075\037\060\041\070\047\055\050\074\053\061" +
    "\054\067\055\063\056\066\057\073\066\013\070\014\071" +
    "\030\072\037\073\015\074\012\075\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\006\244\007\105\010\121\011\126\021\125" +
    "\022\123\027\127\030\005\031\045\032\023\040\122\066" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\251\007\105\010\121\011\126\021" +
    "\125\022\123\027\127\030\005\031\045\032\023\040\122" +
    "\066\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\203\020\162" +
    "\067\256\001\001\000\002\001\001\000\004\005\260\001" +
    "\001\000\032\006\262\007\105\010\121\011\126\021\125" +
    "\022\123\027\127\030\005\031\045\032\023\040\122\066" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\266\007\105\010\121\011\126\021\125\022\123\027\127" +
    "\030\005\031\045\032\023\040\122\066\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\053\015\076" +
    "\016\101\027\071\030\005\031\045\032\023\035\271\036" +
    "\075\037\060\041\070\047\055\050\074\053\061\054\067" +
    "\055\063\056\066\057\073\066\013\070\014\071\030\072" +
    "\037\073\015\074\012\075\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\275\007" +
    "\105\010\121\011\126\021\125\022\123\027\127\030\005" +
    "\031\045\032\023\040\122\066\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\053\015\076\016\101" +
    "\027\071\030\005\031\045\032\023\035\300\036\075\037" +
    "\060\041\070\047\055\050\074\053\061\054\067\055\063" +
    "\056\066\057\073\066\013\070\014\071\030\072\037\073" +
    "\015\074\012\075\054\001\001\000\002\001\001\000\012" +
    "\042\305\043\306\044\303\045\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\310\045\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\053\015\076" +
    "\016\101\027\071\030\005\031\045\032\023\035\313\036" +
    "\075\037\060\041\070\047\055\050\074\053\061\054\067" +
    "\055\063\056\066\057\073\066\013\070\014\071\030\072" +
    "\037\073\015\074\012\075\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\316\007\105\010\121\011" +
    "\126\021\125\022\123\027\127\030\005\031\045\032\023" +
    "\040\122\066\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\053\015\076\016\101\027\071\030\005" +
    "\031\045\032\023\035\321\036\075\037\060\041\070\047" +
    "\055\050\074\053\061\054\067\055\063\056\066\057\073" +
    "\066\013\070\014\071\030\072\037\073\015\074\012\075" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\324\007\105\010\121\011\126\021\125\022\123\027" +
    "\127\030\005\031\045\032\023\040\122\066\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\203\020\162\067\331\001\001" +
    "\000\004\005\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\342\061\337\064\340\065\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\352\062\346\063\344\001\001" +
    "\000\010\046\343\062\346\063\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\342" +
    "\065\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\053\015\076\016\101\027\071\030\005\031\045" +
    "\032\023\035\360\036\075\037\060\041\070\047\055\050" +
    "\074\053\061\054\067\055\063\056\066\057\073\066\013" +
    "\070\014\071\030\072\037\073\015\074\012\075\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\053\015\377\016\375\025\372\026\376\027\374\030" +
    "\005\031\045\032\023\053\373\066\013\001\001\000\026" +
    "\003\053\015\377\016\375\026\u0101\027\374\030\005\031" +
    "\045\032\023\053\373\066\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\176\007\105\010\121\011\126\021" +
    "\125\022\123\027\127\030\005\031\045\032\023\034\u0104" +
    "\040\122\066\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\164\007\105\010\121\011" +
    "\126\021\125\022\123\027\127\030\005\031\045\032\023" +
    "\040\122\066\013\001\001\000\004\063\347\001\001\000" +
    "\002\001\001\000\012\003\342\061\u010e\064\340\065\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\053\015\076\016\101\027\071\030\005\031\045\032\023" +
    "\035\u0111\036\075\037\060\041\070\047\055\050\074\053" +
    "\061\054\067\055\063\056\066\057\073\066\013\070\014" +
    "\071\030\072\037\073\015\074\012\075\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\342\061\u0114" +
    "\064\340\065\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\053\015\076\016\101\027\071\030\005" +
    "\031\045\032\023\035\u0117\036\075\037\060\041\070\047" +
    "\055\050\074\053\061\054\067\055\063\056\066\057\073" +
    "\066\013\070\014\071\030\072\037\073\015\074\012\075" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\347\001\001\000\002\001\001\000" +
    "\012\003\342\061\u011d\064\340\065\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\053\015\076\016" +
    "\101\027\071\030\005\031\045\032\023\035\u0120\036\075" +
    "\037\060\041\070\047\055\050\074\053\061\054\067\055" +
    "\063\056\066\057\073\066\013\070\014\071\030\072\037" +
    "\073\015\074\012\075\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\342\061\u0123\064\340\065\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\053\015\076\016\101\027\071\030\005\031\045\032\023" +
    "\035\u0126\036\075\037\060\041\070\047\055\050\074\053" +
    "\061\054\067\055\063\056\066\057\073\066\013\070\014" +
    "\071\030\072\037\073\015\074\012\075\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\176\007\105" +
    "\010\121\011\126\021\125\022\123\027\127\030\005\031" +
    "\045\032\023\034\u0129\040\122\066\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\176\007\105\010" +
    "\121\011\126\021\125\022\123\027\127\030\005\031\045" +
    "\032\023\034\u012c\040\122\066\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\u012f\032\023\066\013" +
    "\001\001\000\002\001\001\000\034\006\176\007\105\010" +
    "\121\011\126\021\125\022\123\027\127\030\005\031\045" +
    "\032\023\034\u0131\040\122\066\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\176\007\105\010\121" +
    "\011\126\021\125\022\123\027\127\030\005\031\045\032" +
    "\023\034\u0134\040\122\066\013\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_SD$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_SD$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_SD$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    

    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public Nodo getRoot(){
        return action_obj.Root;
    }

    public Nodo crearNodo(String nombre, token tk)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,tk.cadena,tk.linea,tk.columna);
        return nuevo;
    }

    public Nodo crearNodo(String nombre, String valor, int linea, int columna)
    {
        Nodo nuevo = new Nodo(action_obj.Index++,nombre,valor,linea,columna);
        return nuevo;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_SD$actions {


    public int Index=1;
    public Nodo Root;


  private final Analizador_SD parser;

  /** Constructor */
  CUP$Analizador_SD$actions(Analizador_SD parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_SD$do_action(
    int                        CUP$Analizador_SD$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_SD$parser,
    java.util.Stack            CUP$Analizador_SD$stack,
    int                        CUP$Analizador_SD$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_SD$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_SD$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Pintar_Linea ::= LINEA APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarlinea","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Pintar_Linea",58, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Pintar_Cadena ::= CADENA APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcadena","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Pintar_Cadena",57, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Pintar_Ovalo ::= OVALO APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarovalo","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Pintar_Ovalo",56, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Pintar_Cuadrado ::= CUADRADO APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarcuadrado","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Pintar_Cuadrado",55, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Pintar_Punto ::= PUNTO APAR ValParams CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("pintarpunto","",a.linea,a.columna);
                            RESULT.add(b);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Pintar_Punto",54, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Funciones_Nativas ::= Pintar_Linea 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",59, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Funciones_Nativas ::= Pintar_Ovalo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",59, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Funciones_Nativas ::= Pintar_Cuadrado 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",59, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Funciones_Nativas ::= Pintar_Punto 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",59, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Funciones_Nativas ::= Pintar_Cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Funciones_Nativas",59, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Star_SimArr ::= Muchos_SimArr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = a;
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Star_SimArr",36, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Star_SimArr ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("SimArr","",0,0); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Star_SimArr",36, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Parametro ::= ID Star_SimArr ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("parametroStruct","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("tipo",c.cadena,c.linea,c.columna));
                            RESULT.add(parser.crearNodo("id",c.cadena,c.linea,c.columna));
                            RESULT.add(b);

                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Parametro",51, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Parametro ::= tipo_dato Star_SimArr ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		   
                            RESULT = parser.crearNodo("parametroVal","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(parser.crearNodo("id",c.cadena,c.linea,c.columna));
                            RESULT.add(b);

                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Parametro",51, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Parametros ::= Parametro 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("parametros","",a.linea,a.columna);
                            RESULT.add(a);
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Parametros",50, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Parametros ::= Parametros COMA Parametro 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Parametros",50, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Lista_Parametros ::= Parametros 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",47, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Lista_Parametros ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("parametros","",0,0);  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",47, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SimArr ::= ACORCH CCORCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		     RESULT = parser.crearNodo("sim","sim",a.linea,a.columna);    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("SimArr",49, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Muchos_SimArr ::= SimArr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("SimArr","",a.linea,a.columna);
                            RESULT.add(a);
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Muchos_SimArr",48, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Muchos_SimArr ::= Muchos_SimArr SimArr 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Muchos_SimArr",48, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Metodo ::= VACIO PRINCIPAL APAR CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("metodo","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo","vacio",a.linea,a.columna));
                        RESULT.add(parser.crearNodo("id","principal",b.linea,b.columna));
                        RESULT.add(parser.crearNodo("parametros","",0,0));
                        RESULT.add(c);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Metodo ::= ID ID APAR Lista_Parametros CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("metodo","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo",a.cadena,a.linea,a.columna));
                        RESULT.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));
                        RESULT.add(c);
                        RESULT.add(d);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Metodo ::= tipo_dato ID APAR Lista_Parametros CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("metodo","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));
                        RESULT.add(c);
                        RESULT.add(d);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Metodo ::= ID Muchos_SimArr ID APAR Lista_Parametros CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		

                        RESULT = parser.crearNodo("metodoArray","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo",a.cadena,a.linea,a.columna));
                        
                        RESULT.add(parser.crearNodo("id",c.cadena,c.linea,c.columna));
                        RESULT.add(d);
                        RESULT.add(e);

                        RESULT.add(b);

                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Metodo ::= tipo_dato Muchos_SimArr ID APAR Lista_Parametros CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token c = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("metodoArray","",a.linea,a.columna);
                        RESULT.add(a);
                        
                        RESULT.add(parser.crearNodo("id",c.cadena,c.linea,c.columna));
                        RESULT.add(d);
                        RESULT.add(e);

                        RESULT.add(b);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Metodo ::= VACIO ID APAR Lista_Parametros CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("metodo","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo","vacio",a.linea,a.columna));
                        RESULT.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));
                        RESULT.add(c);
                        RESULT.add(d);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Metodo",46, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Sentencia ::= Funciones_Nativas PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Sentencia ::= declaracion_variable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Sentencia ::= Simplificada PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Sentencia ::= Acceso PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Sentencia ::= asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Sentencia ::= Sent_Imprimir 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Sentencia ::= Sent_Retornar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Sentencia ::= Sent_Continuar 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Sentencia ::= Sent_Detener 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Sentencia ::= Sent_Para 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Sentencia ::= Sent_Mientras 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Sentencia ::= Sent_Si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencia",29, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Sentencias ::= Sentencia 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("sentencias","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencias",28, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Sentencias ::= Sentencias Sentencia 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                        
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sentencias",28, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MuchasSentencias ::= Sentencias 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("MuchasSentencias",27, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MuchasSentencias ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("sentencias","",0,0);    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("MuchasSentencias",27, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Sent_Imprimir ::= IMPRIMIR APAR expl CPAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		
                        RESULT = parser.crearNodo("imprimir","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Imprimir",45, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Sent_Retornar ::= RETORNAR expl PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("retornar","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Retornar",44, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Sent_Retornar ::= RETORNAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("retornar","",a.linea,a.columna);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Retornar",44, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Sent_Continuar ::= CONTINUAR PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("continuar","",a.linea,a.columna);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Continuar",43, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Sent_Detener ::= DETENER PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("detener","",a.linea,a.columna);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Detener",42, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Simplificada ::= Acceso DEC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","decremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Simplificada",41, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Simplificada ::= Acceso INC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("simplificada","incremento",a.linea,a.columna);
                        RESULT.add(a);
                   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Simplificada",41, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Actualizacion ::= Simplificada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Actualizacion",40, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Inicializacion ::= Acceso IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("asignacion","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Inicializacion",39, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Inicializacion ::= ENTERO ID IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		token b = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("declaracionPrimitiva","",a.linea,a.columna);
                        RESULT.add(parser.crearNodo("tipo",a.cadena,a.linea,a.columna));

                        Nodo lista_Id = parser.crearNodo("listaid","",b.linea,b.columna);
                        lista_Id.add(parser.crearNodo("id",b.cadena,b.linea,b.columna));

                        RESULT.add(lista_Id);
                        RESULT.add(c);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Inicializacion",39, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Sent_Para ::= PARA APAR Inicializacion PYC expl PYC Actualizacion CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("Para","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                            RESULT.add(c);
                            RESULT.add(d);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Para",38, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Sent_Mientras ::= MIENTRAS APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("Mientras","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Mientras",37, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sino ::= SINO ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("Sino","",a.linea,a.columna);
                        RESULT.add(b);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("sino",35, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sino_si ::= SINO SI APAR expl CPAR ALLA MuchasSentencias CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("SinoSi","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("sino_si",34, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // muchos_sino_si ::= sino_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("muchos_sinosi","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",33, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // muchos_sino_si ::= muchos_sino_si sino_si 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("muchos_sino_si",33, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // final_si ::= sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("final_si",32, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // final_si ::= muchos_sino_si sino 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("partefinal","",a.linea,a.columna);   
                        RESULT.add(a);
                        RESULT.add(b);
                     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("final_si",32, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // final_si ::= 
            {
              Nodo RESULT =null;
		
                        RESULT = parser.crearNodo("partefinal","",0,0);   
                     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("final_si",32, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Sent_Si ::= SI APAR expl CPAR ALLA MuchasSentencias CLLA final_si 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Si","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                        RESULT.add(c);
                     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Si",31, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Sent_Ternario ::= expl SIGNO_Q expl DSPTS expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Ternario","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                        RESULT.add(c);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Sent_Ternario",30, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ValParams ::= expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("ValParams","",a.linea,a.columna);
                            RESULT.add(a);
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("ValParams",26, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ValParams ::= ValParams COMA expl 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("ValParams",26, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Lista_ValParams ::= ValParams 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		    RESULT = a;    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",25, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Lista_ValParams ::= 
            {
              Nodo RESULT =null;
		    RESULT = parser.crearNodo("ValParams","",0,0);  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Lista_ValParams",25, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MuchosIndices ::= indices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("MuchosIndices",53, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MuchosIndices ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("indices","",0,0); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("MuchosIndices",53, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamada ::= ID APAR Lista_ValParams CPAR MuchosIndices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("llamada","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
                            RESULT.add(b);
                            RESULT.add(c);
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("llamada",24, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AccesoArray ::= ID indices 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("AccesoArray","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));     
                            RESULT.add(b);
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("AccesoArray",52, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipoAcceso ::= ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 
                            RESULT = parser.crearNodo("AccesoId","",a.linea,a.columna); 
                            RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna)); 
                        
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipoAcceso",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipoAcceso ::= AccesoArray 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipoAcceso",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipoAcceso ::= llamada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipoAcceso",23, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AccesoRecursivo ::= tipoAcceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("Acceso","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("AccesoRecursivo",22, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AccesoRecursivo ::= AccesoRecursivo PTO tipoAcceso 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("AccesoRecursivo",22, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Acceso ::= AccesoRecursivo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("Acceso",21, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dato ::= NULO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("NULO_LITERAL",a);      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dato ::= FALSO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("FALSO_LITERAL",a);     
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dato ::= VERDADERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("VERDADERO_LITERAL",a); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dato ::= DECIMAL_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("DECIMAL_LITERAL",a);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dato ::= NUM_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("NUM_LITERAL",a);       
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dato ::= CHAR_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("CHAR_LITERAL",a);    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dato ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("STRING_LITERAL",a);    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expa ::= Acceso 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expa ::= valores_arreglo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expa ::= dato 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expa ::= APAR expl CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expa ::= MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("unario","",a.linea,a.columna); RESULT.add(a); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expa ::= expa POT expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("POT","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expa ::= expa DIV expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("DIV","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expa ::= expa POR expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("POR","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expa ::= expa MENOS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MENOS","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expa ::= expa MAS expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MAS","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expa",6, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expa MAYIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expa MAYQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MAYQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expa MENIQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MENIQ","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expa MENQ expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("MENQ","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expa DIF expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("DIF","",a.linea,a.columna);    RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expa IG_IG expa 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("IG_IG","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expl ::= expr 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expl ::= NOT expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("NOT","",a.linea,a.columna);  RESULT.add(a);                  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expl ::= expl OR expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("OR","",a.linea,a.columna);   RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expl ::= expl AND expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("AND","",a.linea,a.columna);  RESULT.add(a); RESULT.add(b);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expl ::= Sent_Ternario 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("expl",4, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion_var ::= IGUAL expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion_var ::= 
            {
              Nodo RESULT =null;
		 RESULT = parser.crearNodo("","",0,0); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion_var",3, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_id ::= ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                RESULT = parser.crearNodo("listaid","",a.linea,a.columna);
                RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
            
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_id ::= lista_id COMA ID 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                b.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
                RESULT  =  b;
            
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_id",2, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_dato ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("tipo",a.cadena,a.linea,a.columna); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_dato ::= BOOLEANO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("tipo",a.cadena,a.linea,a.columna); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato ::= CARACTER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("tipo",a.cadena,a.linea,a.columna); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("tipo",a.cadena,a.linea,a.columna); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = parser.crearNodo("tipo",a.cadena,a.linea,a.columna); 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("tipo_dato",1, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_valores ::= expl 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            RESULT = parser.crearNodo("dimension_valores","",a.linea,a.columna);
                            RESULT.add(a);
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_valores",17, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_valores ::= lista_valores COMA expl 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("lista_valores",17, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // una_dimension ::= ALLA lista_valores CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = a;
                      
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("una_dimension",16, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valores_arreglo ::= una_dimension 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("valores_arreglo",15, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // indice ::= ACORCH expl CCORCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		  RESULT = a;  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indice",14, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // indices ::= indice 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                RESULT = parser.crearNodo("indices","",a.linea,a.columna);
                RESULT.add(a);
           
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indices",13, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // indices ::= indices indice 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                b.add(a);
                RESULT = b;
           
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("indices",13, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_variable ::= ID lista_id MuchosIndices asignacion_var PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("declaracion_variable","",a.linea,a.columna);
                            RESULT.add(parser.crearNodo("tipo",a.cadena,a.linea,a.columna));
                            RESULT.add(b);
                            RESULT.add(c);
                            RESULT.add(d); 
                        
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_variable ::= tipo_dato lista_id MuchosIndices asignacion_var PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                            RESULT = parser.crearNodo("declaracion_variable","",a.linea,a.columna);
                            RESULT.add(a);
                            RESULT.add(b);
                            RESULT.add(c);
                            RESULT.add(d);
                        
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_variable",11, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= Acceso IGUAL expl PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                        RESULT = parser.crearNodo("asignacion","",a.linea,a.columna);
                        RESULT.add(a);
                        RESULT.add(b);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // miembros ::= Simplificada PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",20, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // miembros ::= asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",20, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // miembros ::= declaracion_variable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("miembros",20, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo_estructura ::= miembros 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                                RESULT = parser.crearNodo("cuerpo","",a.linea,a.columna);
                                RESULT.add(a); 
                          
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",19, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_estructura ::= cuerpo_estructura miembros 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 
                                 b.add(a);
                                 RESULT = b;
                          
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura",19, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_estructura ::= ESTRUCT ID ALLA cuerpo_estructura CLLA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		
                                RESULT = parser.crearNodo("declaracion_estructura","",a.linea,a.columna);
                                RESULT.add(parser.crearNodo("id",a.cadena,a.linea,a.columna));
                                RESULT.add(b);
                           
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaracion_estructura",18, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // importar ::= IMPORTAR APAR STRING_LITERAL CPAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		   RESULT = parser.crearNodo("importar",a.cadena,a.linea,a.columna);  
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("importar",60, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones ::= importar PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= Funciones_Nativas PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones ::= Simplificada PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones ::= Acceso PYC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones ::= Metodo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= asignacion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion_estructura 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion_variable 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 RESULT = a; RESULT.nombre = "declaracion_variableGlobal"; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("declaraciones",10, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // contenido_cuerpo ::= declaraciones 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = parser.crearNodo("cuerpo","",a.linea,a.columna);
                        RESULT.add(a);
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("contenido_cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenido_cuerpo ::= contenido_cuerpo declaraciones 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        b.add(a);
                        RESULT = b;
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("contenido_cuerpo",9, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_documento ::= contenido_cuerpo 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		
                        RESULT = a;
                    
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_documento",8, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_documento ::= 
            {
              Nodo RESULT =null;
		  RESULT = parser.crearNodo("cuerpo","",0,0);   
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("cuerpo_documento",8, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo_documento 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.peek()).value;
		 parser.action_obj.Root = a; 
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          return CUP$Analizador_SD$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_SD$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.elementAt(CUP$Analizador_SD$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_SD$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_SD$parser.done_parsing();
          return CUP$Analizador_SD$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 06 16:52:10 CST 2018
//----------------------------------------------------

package INTERPRETE_PILA.GRAMATICA;

import ESTRUCTURAS.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 06 16:52:10 CST 2018
  */
public class SintacticaDasm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticaDasm() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticaDasm(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticaDasm(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\005\004\000\002\005\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\022\006\001\002\000\006\002\ufffe\022" +
    "\ufffe\001\002\000\004\002\101\001\002\000\030\034\020" +
    "\044\024\045\021\046\014\047\013\050\011\051\017\052" +
    "\016\053\023\054\022\056\015\001\002\000\006\002\000" +
    "\022\006\001\002\000\006\002\uffff\022\uffff\001\002\000" +
    "\072\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\043\ufff7\055\ufff7\001\002\000\070\004\050\005\057" +
    "\006\046\007\047\010\040\011\025\012\056\013\027\014" +
    "\032\015\042\016\043\017\030\020\026\021\037\023\036" +
    "\024\034\025\044\026\055\031\041\032\052\033\035\035" +
    "\060\036\053\040\051\041\054\043\033\055\061\001\002" +
    "\000\072\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\043\ufff8\055\ufff8\001\002\000\072\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\055" +
    "\ufff9\001\002\000\072\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\043\ufff2\055\ufff2\001\002\000\072" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\043\ufff5\055\ufff5\001\002\000\072\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\055\ufff6\001" +
    "\002\000\072\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\035\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\043\ufffc\055\ufffc\001\002\000\072\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa" +
    "\055\ufffa\001\002\000\072\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\043\ufff3\055\ufff3\001\002\000" +
    "\072\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\043\ufff4\055\ufff4\001\002\000\072\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\031\ufffb\032\ufffb\033\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\055\ufffb" +
    "\001\002\000\072\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\043\uffda\055\uffda\001\002\000\072\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043" +
    "\uffe7\055\uffe7\001\002\000\072\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\055\uffe4\001\002" +
    "\000\072\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\055\uffe6\001\002\000\072\004\050\005" +
    "\057\006\046\007\047\010\040\011\025\012\056\013\027" +
    "\014\032\015\042\016\043\017\030\020\026\021\037\023" +
    "\036\024\034\025\044\026\055\031\041\032\052\033\035" +
    "\035\060\036\053\037\077\040\051\041\054\043\033\055" +
    "\061\001\002\000\072\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\043\uffe3\055\uffe3\001\002\000\030" +
    "\034\020\044\024\045\021\046\014\047\013\050\011\051" +
    "\017\052\016\053\023\054\022\056\015\001\002\000\012" +
    "\027\066\030\070\032\064\055\067\001\002\000\072\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\031\uffed\032\uffed" +
    "\033\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043" +
    "\uffed\055\uffed\001\002\000\012\027\066\030\070\032\064" +
    "\055\067\001\002\000\072\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\043\uffe5\055\uffe5\001\002\000" +
    "\072\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\055\uffdb\001\002\000\072\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\031\uffe8\032\uffe8\033\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\055\uffe8" +
    "\001\002\000\072\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\043\uffe2\055\uffe2\001\002\000\072\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\055\uffe1\001\002\000\012\027\066\030\070\032\064" +
    "\055\067\001\002\000\072\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\031\ufff0\032\ufff0\033\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\043\ufff0\055\ufff0\001\002\000" +
    "\072\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\043\uffdd\055\uffdd\001\002\000\072\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\055\uffdc" +
    "\001\002\000\072\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\043\uffdf\055\uffdf\001\002\000\072\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043" +
    "\uffd7\055\uffd7\001\002\000\072\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\031\uffef\032\uffef\033\uffef\035\uffef\036" +
    "\uffef\037\uffef\040\uffef\041\uffef\043\uffef\055\uffef\001\002" +
    "\000\004\031\072\001\002\000\072\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\055\uffd6\001" +
    "\002\000\012\027\066\030\070\032\064\055\067\001\002" +
    "\000\072\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\043\uffe0\055\uffe0\001\002\000\072\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\031\uffde\032\uffde\033\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\055" +
    "\uffde\001\002\000\004\031\063\001\002\000\004\032\062" +
    "\001\002\000\072\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\031\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\043\uffee\055\uffee\001\002\000\072\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043" +
    "\uffd9\055\uffd9\001\002\000\072\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\055\uffd3\001\002" +
    "\000\072\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\043\uffec\055\uffec\001\002\000\072\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\055" +
    "\uffd4\001\002\000\004\032\071\001\002\000\072\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1" +
    "\055\uffd1\001\002\000\072\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\043\uffd2\055\uffd2\001\002\000" +
    "\072\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\043\uffd8\055\uffd8\001\002\000\072\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\031\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\055\uffeb" +
    "\001\002\000\072\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\043\uffe9\055\uffe9\001\002\000\072\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\031\uffea\032\uffea" +
    "\033\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\055\uffea\001\002\000\072\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\055\uffd5\001\002" +
    "\000\006\002\ufffd\022\ufffd\001\002\000\072\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\055" +
    "\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\004\003\006\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\011\001\001" +
    "\000\004\004\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\030\006\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\077\001\001\000\002\001\001\000\004\010" +
    "\075\001\001\000\004\007\074\001\001\000\002\001\001" +
    "\000\004\007\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticaDasm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticaDasm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticaDasm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        

    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        //Inicio.reporteError.agregar("Sintactico",s.right+1,s.left+1,"Identificador "+s.value+" no reconocido");
    }
    
    public Nodo dema_Raiz(){
        return action_obj.raiz_padre;
    }

    public Nodo crearNodo(String nombre, token tk)
    {
        Nodo nuevo = new Nodo(action_obj.indice++,nombre,tk.cadena,tk.linea,tk.columna);
        return nuevo;
    }

    public Nodo crearNodo(String nombre, String valor, int linea, int columna)
    {
        Nodo nuevo = new Nodo(action_obj.indice++,nombre,valor,linea,columna);
        return nuevo;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticaDasm$actions {


    public int indice=1;
    public Nodo raiz_padre;

  private final SintacticaDasm parser;

  /** Constructor */
  CUP$SintacticaDasm$actions(SintacticaDasm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticaDasm$do_action(
    int                        CUP$SintacticaDasm$act_num,
    java_cup.runtime.lr_parser CUP$SintacticaDasm$parser,
    java.util.Stack            CUP$SintacticaDasm$stack,
    int                        CUP$SintacticaDasm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticaDasm$result;

      /* select the action based on the action number */
      switch (CUP$SintacticaDasm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= R3T 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                RESULT = parser.crearNodo("ret",a);
            
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= SIG_MENOS NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                RESULT = parser.crearNodo("unario",a);
            
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                RESULT = parser.crearNodo("numero",a);
            
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= C4LC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                RESULT = parser.crearNodo("calc",a);
            
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("valor",5, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= CALL nombreF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("llamada",a.valor,a.linea,a.columna);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= F_CHAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("f_char",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= PRINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("print",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= BR ETIQUETA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("br",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= BR_IF ETIQUETA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("br_if",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= MOD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("mod",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= POT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("pot",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= DIV 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("div",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= MULT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("mult",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= DIFF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("diff",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= ADD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("add",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= EQZ 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("eqz",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= GTE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("gte",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= GT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("gt",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= LTE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("lte",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia ::= LT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("lt",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia ::= NOT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("not",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia ::= OR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("or",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= AND 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("and",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= ETIQUETA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("etiqueta",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= SET_LOCAL valor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("set_local","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= SET_GLOBAL valor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("set_global","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= GET_LOCAL valor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("get_local","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= GET_GLOBAL valor 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("get_global","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("decimal",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= SIG_MENOS NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("unario",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= NUMERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("numero",a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= sentencia 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("sentencias","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= sentencias sentencia 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            b.add(a);
                            RESULT = b;
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nombreF ::= CONCAT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombreF ::= GETINT 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nombreF ::= GETSTR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nombreF ::= MAYORIGUAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nombreF ::= MAYOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nombreF ::= MENORIGUAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nombreF ::= MENOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nombreF ::= NOIGUAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nombreF ::= IGUALIGUAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nombreF ::= OUT_STR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nombreF ::= ID 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		token a = (token)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		  RESULT = parser.crearNodo("id",a);  
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("nombreF",6, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcion ::= FUNCTION nombreF sentencias END 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).value;
		
                            RESULT = parser.crearNodo("metodo",a.valor,a.linea,a.columna);
                            RESULT.add(b);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenido ::= funcion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            RESULT = parser.crearNodo("contenido","",a.linea,a.columna);
                            RESULT.add(a);
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("contenido",1, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // contenido ::= contenido funcion 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            b.add(a);
                            RESULT= b;
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("contenido",1, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= contenido 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.peek()).value;
		
                            raiz_padre = a;
                        
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          return CUP$SintacticaDasm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)).value;
		RESULT = start_val;
              CUP$SintacticaDasm$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.elementAt(CUP$SintacticaDasm$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticaDasm$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticaDasm$parser.done_parsing();
          return CUP$SintacticaDasm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

